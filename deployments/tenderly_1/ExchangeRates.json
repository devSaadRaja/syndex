{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.17\"},\"sources\":{\"src/contracts/ExchangeRates.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/FlagsInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\\\";\\n\\nimport \\\"./MixinSystemSettings.sol\\\";\\n\\nimport \\\"../interfaces/IExchangeRates.sol\\\";\\nimport \\\"../interfaces/ICircuitBreaker.sol\\\";\\n\\nimport \\\"../libraries/SafeDecimalMath.sol\\\";\\n\\ncontract ExchangeRates is Ownable, MixinSystemSettings {\\n    using SafeMath for uint;\\n    using SafeDecimalMath for uint;\\n\\n    bytes32 public constant CONTRACT_NAME = \\\"ExchangeRates\\\";\\n\\n    bytes32 internal constant CONTRACT_CIRCUIT_BREAKER = \\\"CircuitBreaker\\\";\\n\\n    //slither-disable-next-line naming-convention\\n    bytes32 internal constant sUSD = \\\"sUSD\\\";\\n\\n    // Decentralized oracle networks that feed into pricing aggregators\\n    mapping(bytes32 => AggregatorV2V3Interface) public aggregators;\\n\\n    mapping(bytes32 => uint8) public currencyKeyDecimals;\\n\\n    // List of aggregator keys for convenient iteration\\n    bytes32[] public aggregatorKeys;\\n\\n    // ========== CONSTRUCTOR ==========\\n\\n    constructor(\\n        address _owner,\\n        address _resolver\\n    ) Ownable(_owner) MixinSystemSettings(_resolver) {}\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function addAggregator(\\n        bytes32 currencyKey,\\n        address aggregatorAddress\\n    ) external onlyOwner {\\n        AggregatorV2V3Interface aggregator = AggregatorV2V3Interface(\\n            aggregatorAddress\\n        );\\n        // This check tries to make sure that a valid aggregator is being added.\\n        // It checks if the aggregator is an existing smart contract that has implemented `latestTimestamp` function.\\n\\n        require(aggregator.latestRound() >= 0, \\\"Given Aggregator is invalid\\\");\\n        uint8 decimals = aggregator.decimals();\\n        // This contract converts all external rates to 18 decimal rates, so adding external rates with\\n        // higher precision will result in losing precision internally. 27 decimals will result in losing 9 decimal\\n        // places, which should leave plenty precision for most things.\\n        require(\\n            decimals <= 27,\\n            \\\"Aggregator decimals should be lower or equal to 27\\\"\\n        );\\n        if (address(aggregators[currencyKey]) == address(0)) {\\n            aggregatorKeys.push(currencyKey);\\n        }\\n        aggregators[currencyKey] = aggregator;\\n        currencyKeyDecimals[currencyKey] = decimals;\\n        emit AggregatorAdded(currencyKey, address(aggregator));\\n    }\\n\\n    function removeAggregator(bytes32 currencyKey) external onlyOwner {\\n        address aggregator = address(aggregators[currencyKey]);\\n        require(aggregator != address(0), \\\"No aggregator exists for key\\\");\\n        delete aggregators[currencyKey];\\n        delete currencyKeyDecimals[currencyKey];\\n\\n        bool wasRemoved = removeFromArray(currencyKey, aggregatorKeys);\\n\\n        if (wasRemoved) {\\n            emit AggregatorRemoved(currencyKey, aggregator);\\n        }\\n    }\\n\\n    function rateWithSafetyChecks(\\n        bytes32 currencyKey\\n    ) external returns (uint rate, bool broken, bool staleOrInvalid) {\\n        address aggregatorAddress = address(aggregators[currencyKey]);\\n        require(\\n            currencyKey == sUSD || aggregatorAddress != address(0),\\n            \\\"No aggregator for asset\\\"\\n        );\\n\\n        IExchangeRates.RateAndUpdatedTime\\n            memory rateAndTime = _getRateAndUpdatedTime(currencyKey);\\n\\n        if (currencyKey == sUSD) {\\n            return (rateAndTime.rate, false, false);\\n        }\\n\\n        rate = rateAndTime.rate;\\n        broken = circuitBreaker().probeCircuitBreaker(\\n            aggregatorAddress,\\n            rateAndTime.rate\\n        );\\n        staleOrInvalid =\\n            _rateIsStaleWithTime(getRateStalePeriod(), rateAndTime.time) ||\\n            _rateIsFlagged(\\n                currencyKey,\\n                FlagsInterface(getAggregatorWarningFlags())\\n            );\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function resolverAddressesRequired()\\n        public\\n        view\\n        override\\n        returns (bytes32[] memory addresses)\\n    {\\n        bytes32[] memory existingAddresses = MixinSystemSettings\\n            .resolverAddressesRequired();\\n        bytes32[] memory newAddresses = new bytes32[](1);\\n        newAddresses[0] = CONTRACT_CIRCUIT_BREAKER;\\n\\n        return combineArrays(existingAddresses, newAddresses);\\n    }\\n\\n    function circuitBreaker() internal view returns (ICircuitBreaker) {\\n        return ICircuitBreaker(requireAndGetAddress(CONTRACT_CIRCUIT_BREAKER));\\n    }\\n\\n    function currenciesUsingAggregator(\\n        address aggregator\\n    ) external view returns (bytes32[] memory currencies) {\\n        uint count = 0;\\n        currencies = new bytes32[](aggregatorKeys.length);\\n        for (uint i = 0; i < aggregatorKeys.length; i++) {\\n            bytes32 currencyKey = aggregatorKeys[i];\\n            if (address(aggregators[currencyKey]) == aggregator) {\\n                currencies[count++] = currencyKey;\\n            }\\n        }\\n    }\\n\\n    function rateStalePeriod() external view returns (uint) {\\n        return getRateStalePeriod();\\n    }\\n\\n    function aggregatorWarningFlags() external view returns (address) {\\n        return getAggregatorWarningFlags();\\n    }\\n\\n    function rateAndUpdatedTime(\\n        bytes32 currencyKey\\n    ) external view returns (uint rate, uint time) {\\n        IExchangeRates.RateAndUpdatedTime\\n            memory rateAndTime = _getRateAndUpdatedTime(currencyKey);\\n        return (rateAndTime.rate, rateAndTime.time);\\n    }\\n\\n    function getLastRoundIdBeforeElapsedSecs(\\n        bytes32 currencyKey,\\n        uint startingRoundId,\\n        uint startingTimestamp,\\n        uint timediff\\n    ) external view returns (uint) {\\n        uint roundId = startingRoundId;\\n        uint nextTimestamp = 0;\\n        while (true) {\\n            (, nextTimestamp) = _getRateAndTimestampAtRound(\\n                currencyKey,\\n                roundId + 1\\n            );\\n            // if there's no new round, then the previous roundId was the latest\\n            if (\\n                nextTimestamp == 0 ||\\n                nextTimestamp > startingTimestamp + timediff\\n            ) {\\n                return roundId;\\n            }\\n            roundId++;\\n        }\\n        return roundId;\\n    }\\n\\n    function getCurrentRoundId(\\n        bytes32 currencyKey\\n    ) external view returns (uint) {\\n        return _getCurrentRoundId(currencyKey);\\n    }\\n\\n    function effectiveValueAndRatesAtRound(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        uint roundIdForSrc,\\n        uint roundIdForDest\\n    )\\n        external\\n        view\\n        returns (uint value, uint sourceRate, uint destinationRate)\\n    {\\n        (sourceRate, ) = _getRateAndTimestampAtRound(\\n            sourceCurrencyKey,\\n            roundIdForSrc\\n        );\\n        // If there's no change in the currency, then just return the amount they gave us\\n        if (sourceCurrencyKey == destinationCurrencyKey) {\\n            destinationRate = sourceRate;\\n            value = sourceAmount;\\n        } else {\\n            (destinationRate, ) = _getRateAndTimestampAtRound(\\n                destinationCurrencyKey,\\n                roundIdForDest\\n            );\\n            // prevent divide-by 0 error (this happens if the dest is not a valid rate)\\n            if (destinationRate > 0) {\\n                // Calculate the effective value by going from source -> USD -> destination\\n                value = sourceAmount\\n                    .multiplyDecimalRound(sourceRate)\\n                    .divideDecimalRound(destinationRate);\\n            }\\n        }\\n    }\\n\\n    function rateAndTimestampAtRound(\\n        bytes32 currencyKey,\\n        uint roundId\\n    ) external view returns (uint rate, uint time) {\\n        return _getRateAndTimestampAtRound(currencyKey, roundId);\\n    }\\n\\n    function lastRateUpdateTimes(\\n        bytes32 currencyKey\\n    ) external view returns (uint256) {\\n        return _getUpdatedTime(currencyKey);\\n    }\\n\\n    function lastRateUpdateTimesForCurrencies(\\n        bytes32[] calldata currencyKeys\\n    ) external view returns (uint[] memory) {\\n        uint[] memory lastUpdateTimes = new uint[](currencyKeys.length);\\n\\n        for (uint i = 0; i < currencyKeys.length; i++) {\\n            lastUpdateTimes[i] = _getUpdatedTime(currencyKeys[i]);\\n        }\\n\\n        return lastUpdateTimes;\\n    }\\n\\n    function effectiveValue(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    ) external view returns (uint value) {\\n        (value, , ) = _effectiveValueAndRates(\\n            sourceCurrencyKey,\\n            sourceAmount,\\n            destinationCurrencyKey\\n        );\\n    }\\n\\n    function effectiveValueAndRates(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    )\\n        external\\n        view\\n        returns (uint value, uint sourceRate, uint destinationRate)\\n    {\\n        return\\n            _effectiveValueAndRates(\\n                sourceCurrencyKey,\\n                sourceAmount,\\n                destinationCurrencyKey\\n            );\\n    }\\n\\n    // SIP-120 Atomic exchanges\\n    function effectiveAtomicValueAndRates(\\n        bytes32,\\n        uint,\\n        bytes32\\n    ) public view virtual returns (uint, uint, uint, uint) {\\n        _notImplemented();\\n    }\\n\\n    function effectiveAtomicValueAndRates(\\n        IDirectIntegrationManager.ParameterIntegrationSettings memory,\\n        uint,\\n        IDirectIntegrationManager.ParameterIntegrationSettings memory,\\n        IDirectIntegrationManager.ParameterIntegrationSettings memory\\n    ) public view virtual returns (uint, uint, uint, uint) {\\n        _notImplemented();\\n    }\\n\\n    function rateForCurrency(bytes32 currencyKey) external view returns (uint) {\\n        return _getRateAndUpdatedTime(currencyKey).rate;\\n    }\\n\\n    /// @notice getting N rounds of rates for a currency at a specific round\\n    /// @param currencyKey the currency key\\n    /// @param numRounds the number of rounds to get\\n    /// @param roundId the round id\\n    /// @return rates a list of rates and a list of times\\n    function ratesAndUpdatedTimeForCurrencyLastNRounds(\\n        bytes32 currencyKey,\\n        uint numRounds,\\n        uint roundId\\n    ) external view returns (uint[] memory rates, uint[] memory times) {\\n        rates = new uint[](numRounds);\\n        times = new uint[](numRounds);\\n\\n        roundId = roundId > 0 ? roundId : _getCurrentRoundId(currencyKey);\\n        for (uint i = 0; i < numRounds; i++) {\\n            // fetch the rate and treat is as current, so inverse limits if frozen will always be applied\\n            // regardless of current rate\\n            (rates[i], times[i]) = _getRateAndTimestampAtRound(\\n                currencyKey,\\n                roundId\\n            );\\n\\n            if (roundId == 0) {\\n                // if we hit the last round, then return what we have\\n                return (rates, times);\\n            } else {\\n                roundId--;\\n            }\\n        }\\n    }\\n\\n    function ratesForCurrencies(\\n        bytes32[] calldata currencyKeys\\n    ) external view returns (uint[] memory) {\\n        uint[] memory _localRates = new uint[](currencyKeys.length);\\n\\n        for (uint i = 0; i < currencyKeys.length; i++) {\\n            _localRates[i] = _getRate(currencyKeys[i]);\\n        }\\n\\n        return _localRates;\\n    }\\n\\n    function rateAndInvalid(\\n        bytes32 currencyKey\\n    ) public view returns (uint rate, bool isInvalid) {\\n        IExchangeRates.RateAndUpdatedTime\\n            memory rateAndTime = _getRateAndUpdatedTime(currencyKey);\\n\\n        if (currencyKey == sUSD) {\\n            return (rateAndTime.rate, false);\\n        }\\n        return (\\n            rateAndTime.rate,\\n            _rateIsStaleWithTime(getRateStalePeriod(), rateAndTime.time) ||\\n                _rateIsFlagged(\\n                    currencyKey,\\n                    FlagsInterface(getAggregatorWarningFlags())\\n                ) ||\\n                _rateIsCircuitBroken(currencyKey, rateAndTime.rate)\\n        );\\n    }\\n\\n    function ratesAndInvalidForCurrencies(\\n        bytes32[] calldata currencyKeys\\n    ) external view returns (uint[] memory rates, bool anyRateInvalid) {\\n        rates = new uint[](currencyKeys.length);\\n\\n        uint256 _rateStalePeriod = getRateStalePeriod();\\n\\n        // fetch all flags at once\\n        bool[] memory flagList = getFlagsForRates(currencyKeys);\\n\\n        for (uint i = 0; i < currencyKeys.length; i++) {\\n            // do one lookup of the rate & time to minimize gas\\n            IExchangeRates.RateAndUpdatedTime\\n                memory rateEntry = _getRateAndUpdatedTime(currencyKeys[i]);\\n            rates[i] = rateEntry.rate;\\n            if (!anyRateInvalid && currencyKeys[i] != sUSD) {\\n                anyRateInvalid =\\n                    flagList[i] ||\\n                    _rateIsStaleWithTime(_rateStalePeriod, rateEntry.time) ||\\n                    _rateIsCircuitBroken(currencyKeys[i], rateEntry.rate);\\n            }\\n        }\\n    }\\n\\n    function rateIsStale(bytes32 currencyKey) external view returns (bool) {\\n        return _rateIsStale(currencyKey, getRateStalePeriod());\\n    }\\n\\n    function rateIsInvalid(bytes32 currencyKey) external view returns (bool) {\\n        (, bool invalid) = rateAndInvalid(currencyKey);\\n        return invalid;\\n    }\\n\\n    function rateIsFlagged(bytes32 currencyKey) external view returns (bool) {\\n        return\\n            _rateIsFlagged(\\n                currencyKey,\\n                FlagsInterface(getAggregatorWarningFlags())\\n            );\\n    }\\n\\n    function anyRateIsInvalid(\\n        bytes32[] calldata currencyKeys\\n    ) external view returns (bool) {\\n        // Loop through each key and check whether the data point is stale.\\n\\n        uint256 _rateStalePeriod = getRateStalePeriod();\\n        bool[] memory flagList = getFlagsForRates(currencyKeys);\\n\\n        for (uint i = 0; i < currencyKeys.length; i++) {\\n            if (currencyKeys[i] == sUSD) {\\n                continue;\\n            }\\n\\n            IExchangeRates.RateAndUpdatedTime\\n                memory rateEntry = _getRateAndUpdatedTime(currencyKeys[i]);\\n            if (\\n                flagList[i] ||\\n                _rateIsStaleWithTime(_rateStalePeriod, rateEntry.time) ||\\n                _rateIsCircuitBroken(currencyKeys[i], rateEntry.rate)\\n            ) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    /// this method checks whether any rate is:\\n    /// 1. flagged\\n    /// 2. stale with respect to current time (block.timestamp)\\n    function anyRateIsInvalidAtRound(\\n        bytes32[] calldata currencyKeys,\\n        uint[] calldata roundIds\\n    ) external view returns (bool) {\\n        // Loop through each key and check whether the data point is stale.\\n\\n        require(\\n            roundIds.length == currencyKeys.length,\\n            \\\"roundIds must be the same length as currencyKeys\\\"\\n        );\\n\\n        uint256 _rateStalePeriod = getRateStalePeriod();\\n        bool[] memory flagList = getFlagsForRates(currencyKeys);\\n\\n        for (uint i = 0; i < currencyKeys.length; i++) {\\n            if (currencyKeys[i] == sUSD) {\\n                continue;\\n            }\\n\\n            // NOTE: technically below `_rateIsStaleWithTime` is supposed to be called with the roundId timestamp in consideration, and `_rateIsCircuitBroken` is supposed to be\\n            // called with the current rate (or just not called at all)\\n            // but thats not how the functionality has worked prior to this change so that is why it works this way here\\n            // if you are adding new code taht calls this function and the rate is a long time ago, note that this function may resolve an invalid rate when its actually valid!\\n            (uint rate, uint time) = _getRateAndTimestampAtRound(\\n                currencyKeys[i],\\n                roundIds[i]\\n            );\\n            if (\\n                flagList[i] ||\\n                _rateIsStaleWithTime(_rateStalePeriod, time) ||\\n                _rateIsCircuitBroken(currencyKeys[i], rate)\\n            ) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function synthTooVolatileForAtomicExchange(\\n        bytes32\\n    ) public view virtual returns (bool) {\\n        _notImplemented();\\n    }\\n\\n    function synthTooVolatileForAtomicExchange(\\n        IDirectIntegrationManager.ParameterIntegrationSettings memory\\n    ) public view virtual returns (bool) {\\n        _notImplemented();\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function getFlagsForRates(\\n        bytes32[] memory currencyKeys\\n    ) internal view returns (bool[] memory flagList) {\\n        FlagsInterface _flags = FlagsInterface(getAggregatorWarningFlags());\\n\\n        // fetch all flags at once\\n        if (_flags != FlagsInterface(address(0))) {\\n            address[] memory _aggregators = new address[](currencyKeys.length);\\n\\n            for (uint i = 0; i < currencyKeys.length; i++) {\\n                _aggregators[i] = address(aggregators[currencyKeys[i]]);\\n            }\\n\\n            flagList = _flags.getFlags(_aggregators);\\n        } else {\\n            flagList = new bool[](currencyKeys.length);\\n        }\\n    }\\n\\n    function removeFromArray(\\n        bytes32 entry,\\n        bytes32[] storage array\\n    ) internal returns (bool) {\\n        for (uint i = 0; i < array.length; i++) {\\n            if (array[i] == entry) {\\n                // Copy the last key into the place of the one we just deleted\\n                // If there's only one key, this is array[0] = array[0].\\n                // If we're deleting the last one, it's also a NOOP in the same way.\\n                array[i] = array[array.length - 1];\\n\\n                // Decrease the size of the array by one.\\n                array.pop();\\n\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function _formatAggregatorAnswer(\\n        bytes32 currencyKey,\\n        int256 rate\\n    ) internal view returns (uint) {\\n        require(rate >= 0, \\\"Negative rate not supported\\\");\\n        uint decimals = currencyKeyDecimals[currencyKey];\\n        uint result = uint(rate);\\n        if (decimals == 0 || decimals == 18) {\\n            // do not convert for 0 (part of implicit interface), and not needed for 18\\n        } else if (decimals < 18) {\\n            // increase precision to 18\\n            uint multiplier = 10 ** (18 - decimals); // SafeMath not needed since decimals is small\\n            result = result.mul(multiplier);\\n        } else if (decimals > 18) {\\n            // decrease precision to 18\\n            uint divisor = 10 ** (decimals - 18); // SafeMath not needed since decimals is small\\n            result = result.div(divisor);\\n        }\\n        return result;\\n    }\\n\\n    function _getRateAndUpdatedTime(\\n        bytes32 currencyKey\\n    ) internal view returns (IExchangeRates.RateAndUpdatedTime memory) {\\n        // sUSD rate is 1.0\\n        if (currencyKey == sUSD) {\\n            return\\n                IExchangeRates.RateAndUpdatedTime({\\n                    rate: uint216(SafeDecimalMath.unit()),\\n                    time: 0\\n                });\\n        } else {\\n            AggregatorV2V3Interface aggregator = aggregators[currencyKey];\\n            if (aggregator != AggregatorV2V3Interface(address(0))) {\\n                // this view from the aggregator is the most gas efficient but it can throw when there's no data,\\n                // so let's call it low-level to suppress any reverts\\n                bytes memory payload = abi.encodeWithSignature(\\n                    \\\"latestRoundData()\\\"\\n                );\\n                // solhint-disable avoid-low-level-calls\\n                // slither-disable-next-line low-level-calls\\n                (bool success, bytes memory returnData) = address(aggregator)\\n                    .staticcall(payload);\\n\\n                if (success) {\\n                    (, int256 answer, , uint256 updatedAt, ) = abi.decode(\\n                        returnData,\\n                        (uint80, int256, uint256, uint256, uint80)\\n                    );\\n                    return\\n                        IExchangeRates.RateAndUpdatedTime({\\n                            rate: uint216(\\n                                _formatAggregatorAnswer(currencyKey, answer)\\n                            ),\\n                            time: uint40(updatedAt)\\n                        });\\n                } // else return defaults, to avoid reverting in views\\n            } // else return defaults, to avoid reverting in views\\n        }\\n    }\\n\\n    function _getCurrentRoundId(\\n        bytes32 currencyKey\\n    ) internal view returns (uint) {\\n        if (currencyKey == sUSD) {\\n            return 0;\\n        }\\n        AggregatorV2V3Interface aggregator = aggregators[currencyKey];\\n        if (aggregator != AggregatorV2V3Interface(address(0))) {\\n            return aggregator.latestRound();\\n        } // else return defaults, to avoid reverting in views\\n    }\\n\\n    function _getRateAndTimestampAtRound(\\n        bytes32 currencyKey,\\n        uint roundId\\n    ) internal view returns (uint rate, uint time) {\\n        // short circuit sUSD\\n        if (currencyKey == sUSD) {\\n            // sUSD has no rounds, and 0 time is preferrable for \\\"volatility\\\" heuristics\\n            // which are used in atomic swaps and fee reclamation\\n            return (SafeDecimalMath.unit(), 0);\\n        } else {\\n            AggregatorV2V3Interface aggregator = aggregators[currencyKey];\\n            if (aggregator != AggregatorV2V3Interface(address(0))) {\\n                // this view from the aggregator is the most gas efficient but it can throw when there's no data,\\n                // so let's call it low-level to suppress any reverts\\n                bytes memory payload = abi.encodeWithSignature(\\n                    \\\"getRoundData(uint80)\\\",\\n                    roundId\\n                );\\n                // solhint-disable avoid-low-level-calls\\n                (bool success, bytes memory returnData) = address(aggregator)\\n                    .staticcall(payload);\\n\\n                if (success) {\\n                    (, int256 answer, , uint256 updatedAt, ) = abi.decode(\\n                        returnData,\\n                        (uint80, int256, uint256, uint256, uint80)\\n                    );\\n                    return (\\n                        _formatAggregatorAnswer(currencyKey, answer),\\n                        updatedAt\\n                    );\\n                } // else return defaults, to avoid reverting in views\\n            } // else return defaults, to avoid reverting in views\\n        }\\n    }\\n\\n    function _getRate(bytes32 currencyKey) internal view returns (uint256) {\\n        return _getRateAndUpdatedTime(currencyKey).rate;\\n    }\\n\\n    function _getUpdatedTime(\\n        bytes32 currencyKey\\n    ) internal view returns (uint256) {\\n        return _getRateAndUpdatedTime(currencyKey).time;\\n    }\\n\\n    function _effectiveValueAndRates(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    )\\n        internal\\n        view\\n        returns (uint value, uint sourceRate, uint destinationRate)\\n    {\\n        sourceRate = _getRate(sourceCurrencyKey);\\n        // If there's no change in the currency, then just return the amount they gave us\\n        if (sourceCurrencyKey == destinationCurrencyKey) {\\n            destinationRate = sourceRate;\\n            value = sourceAmount;\\n        } else {\\n            // Calculate the effective value by going from source -> USD -> destination\\n            destinationRate = _getRate(destinationCurrencyKey);\\n            // prevent divide-by 0 error (this happens if the dest is not a valid rate)\\n            if (destinationRate > 0) {\\n                value = sourceAmount\\n                    .multiplyDecimalRound(sourceRate)\\n                    .divideDecimalRound(destinationRate);\\n            }\\n        }\\n    }\\n\\n    function _rateIsStale(\\n        bytes32 currencyKey,\\n        uint _rateStalePeriod\\n    ) internal view returns (bool) {\\n        // sUSD is a special case and is never stale (check before an SLOAD of getRateAndUpdatedTime)\\n        if (currencyKey == sUSD) {\\n            return false;\\n        }\\n        return\\n            _rateIsStaleWithTime(\\n                _rateStalePeriod,\\n                _getUpdatedTime(currencyKey)\\n            );\\n    }\\n\\n    function _rateIsStaleWithTime(\\n        uint _rateStalePeriod,\\n        uint _time\\n    ) internal view returns (bool) {\\n        return _time.add(_rateStalePeriod) < block.timestamp;\\n    }\\n\\n    function _rateIsFlagged(\\n        bytes32 currencyKey,\\n        FlagsInterface flags\\n    ) internal view returns (bool) {\\n        // sUSD is a special case and is never invalid\\n        if (currencyKey == sUSD) {\\n            return false;\\n        }\\n        address aggregator = address(aggregators[currencyKey]);\\n        // when no aggregator or when the flags haven't been setup\\n        if (aggregator == address(0) || flags == FlagsInterface(address(0))) {\\n            return false;\\n        }\\n        return flags.getFlag(aggregator);\\n    }\\n\\n    function _rateIsCircuitBroken(\\n        bytes32 currencyKey,\\n        uint curRate\\n    ) internal view returns (bool) {\\n        return\\n            circuitBreaker().isInvalid(\\n                address(aggregators[currencyKey]),\\n                curRate\\n            );\\n    }\\n\\n    function _notImplemented() internal pure {\\n        // slither-disable-next-line dead-code\\n        revert(\\\"Cannot be run on this layer\\\");\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event AggregatorAdded(bytes32 currencyKey, address aggregator);\\n    event AggregatorRemoved(bytes32 currencyKey, address aggregator);\\n}\\n\",\"versionPragma\":\"^0.8.17\"},\"src/interfaces/IDirectIntegrationManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IDirectIntegrationManager {\\n    struct ParameterIntegrationSettings {\\n        bytes32 currencyKey;\\n        address dexPriceAggregator;\\n        address atomicEquivalentForDexPricing;\\n        uint atomicExchangeFeeRate;\\n        uint atomicTwapWindow;\\n        uint atomicMaxVolumePerBlock;\\n        uint atomicVolatilityConsiderationWindow;\\n        uint atomicVolatilityUpdateThreshold;\\n        uint exchangeFeeRate;\\n        uint exchangeMaxDynamicFee;\\n        uint exchangeDynamicFeeRounds;\\n        uint exchangeDynamicFeeThreshold;\\n        uint exchangeDynamicFeeWeightDecay;\\n    }\\n\\n    function getExchangeParameters(\\n        address integration,\\n        bytes32 key\\n    ) external view returns (ParameterIntegrationSettings memory settings);\\n\\n    function setExchangeParameters(\\n        address integration,\\n        bytes32[] calldata currencyKeys,\\n        ParameterIntegrationSettings calldata params\\n    ) external;\\n}\\n\",\"versionPragma\":\"^0.8.17\"},\"src/interfaces/IExchangeRates.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./IDirectIntegrationManager.sol\\\";\\n\\ninterface IExchangeRates {\\n    // Structs\\n    struct RateAndUpdatedTime {\\n        uint216 rate;\\n        uint40 time;\\n    }\\n\\n    // Views\\n    function aggregators(bytes32 currencyKey) external view returns (address);\\n\\n    function aggregatorWarningFlags() external view returns (address);\\n\\n    function anyRateIsInvalid(\\n        bytes32[] calldata currencyKeys\\n    ) external view returns (bool);\\n\\n    function anyRateIsInvalidAtRound(\\n        bytes32[] calldata currencyKeys,\\n        uint[] calldata roundIds\\n    ) external view returns (bool);\\n\\n    function currenciesUsingAggregator(\\n        address aggregator\\n    ) external view returns (bytes32[] memory);\\n\\n    function effectiveValue(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    ) external view returns (uint value);\\n\\n    function effectiveValueAndRates(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    ) external view returns (uint value, uint sourceRate, uint destinationRate);\\n\\n    function effectiveValueAndRatesAtRound(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        uint roundIdForSrc,\\n        uint roundIdForDest\\n    ) external view returns (uint value, uint sourceRate, uint destinationRate);\\n\\n    function effectiveAtomicValueAndRates(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    )\\n        external\\n        view\\n        returns (\\n            uint value,\\n            uint systemValue,\\n            uint systemSourceRate,\\n            uint systemDestinationRate\\n        );\\n\\n    function effectiveAtomicValueAndRates(\\n        IDirectIntegrationManager.ParameterIntegrationSettings\\n            calldata sourceSettings,\\n        uint sourceAmount,\\n        IDirectIntegrationManager.ParameterIntegrationSettings\\n            calldata destinationSettings,\\n        IDirectIntegrationManager.ParameterIntegrationSettings\\n            calldata usdSettings\\n    )\\n        external\\n        view\\n        returns (\\n            uint value,\\n            uint systemValue,\\n            uint systemSourceRate,\\n            uint systemDestinationRate\\n        );\\n\\n    function getCurrentRoundId(\\n        bytes32 currencyKey\\n    ) external view returns (uint);\\n\\n    function getLastRoundIdBeforeElapsedSecs(\\n        bytes32 currencyKey,\\n        uint startingRoundId,\\n        uint startingTimestamp,\\n        uint timediff\\n    ) external view returns (uint);\\n\\n    function lastRateUpdateTimes(\\n        bytes32 currencyKey\\n    ) external view returns (uint256);\\n\\n    function rateAndTimestampAtRound(\\n        bytes32 currencyKey,\\n        uint roundId\\n    ) external view returns (uint rate, uint time);\\n\\n    function rateAndUpdatedTime(\\n        bytes32 currencyKey\\n    ) external view returns (uint rate, uint time);\\n\\n    function rateAndInvalid(\\n        bytes32 currencyKey\\n    ) external view returns (uint rate, bool isInvalid);\\n\\n    function rateForCurrency(bytes32 currencyKey) external view returns (uint);\\n\\n    function rateIsFlagged(bytes32 currencyKey) external view returns (bool);\\n\\n    function rateIsInvalid(bytes32 currencyKey) external view returns (bool);\\n\\n    function rateIsStale(bytes32 currencyKey) external view returns (bool);\\n\\n    function rateStalePeriod() external view returns (uint);\\n\\n    function ratesAndUpdatedTimeForCurrencyLastNRounds(\\n        bytes32 currencyKey,\\n        uint numRounds,\\n        uint roundId\\n    ) external view returns (uint[] memory rates, uint[] memory times);\\n\\n    function ratesAndInvalidForCurrencies(\\n        bytes32[] calldata currencyKeys\\n    ) external view returns (uint[] memory rates, bool anyRateInvalid);\\n\\n    function ratesForCurrencies(\\n        bytes32[] calldata currencyKeys\\n    ) external view returns (uint[] memory);\\n\\n    function synthTooVolatileForAtomicExchange(\\n        bytes32 currencyKey\\n    ) external view returns (bool);\\n\\n    function synthTooVolatileForAtomicExchange(\\n        IDirectIntegrationManager.ParameterIntegrationSettings calldata settings\\n    ) external view returns (bool);\\n\\n    function rateWithSafetyChecks(\\n        bytes32 currencyKey\\n    ) external returns (uint rate, bool broken, bool invalid);\\n}\\n\",\"versionPragma\":\"^0.8.17\"},\"src/interfaces/ICircuitBreaker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface ICircuitBreaker {\\n    // Views\\n    function isInvalid(\\n        address oracleAddress,\\n        uint value\\n    ) external view returns (bool);\\n\\n    function priceDeviationThresholdFactor() external view returns (uint);\\n\\n    function isDeviationAboveThreshold(\\n        uint base,\\n        uint comparison\\n    ) external view returns (bool);\\n\\n    function lastValue(address oracleAddress) external view returns (uint);\\n\\n    function circuitBroken(address oracleAddress) external view returns (bool);\\n\\n    // Mutative functions\\n    function resetLastValue(\\n        address[] calldata oracleAddresses,\\n        uint[] calldata values\\n    ) external;\\n\\n    function probeCircuitBreaker(\\n        address oracleAddress,\\n        uint value\\n    ) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.17\"},\"src/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.17\"},\"src/libraries/SafeDecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"../libraries/SafeMath.sol\\\";\\n\\nlibrary SafeDecimalMath {\\n    using SafeMath for uint;\\n\\n    /* Number of decimal places in the representations. */\\n    uint8 public constant decimals = 18;\\n    uint8 public constant highPrecisionDecimals = 27;\\n\\n    /* The number representing 1.0. */\\n    uint public constant UNIT = 10 ** uint(decimals);\\n\\n    /* The number representing 1.0 for higher fidelity numbers. */\\n    uint public constant PRECISE_UNIT = 10 ** uint(highPrecisionDecimals);\\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR =\\n        10 ** uint(highPrecisionDecimals - decimals);\\n\\n    /**\\n     * @return Provides an interface to UNIT.\\n     */\\n    function unit() internal pure returns (uint) {\\n        return UNIT;\\n    }\\n\\n    /**\\n     * @return Provides an interface to PRECISE_UNIT.\\n     */\\n    function preciseUnit() internal pure returns (uint) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     *\\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return (x * y) / UNIT;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of the specified precision unit.\\n     *\\n     * @dev The operands should be in the form of a the specified unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function _multiplyDecimalRound(\\n        uint x,\\n        uint y,\\n        uint precisionUnit\\n    ) private pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        uint quotientTimesTen = (x * (y)) / (precisionUnit / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a precise unit.\\n     *\\n     * @dev The operands should be in the precise unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRoundPrecise(\\n        uint x,\\n        uint y\\n    ) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a standard unit.\\n     *\\n     * @dev The operands should be in the standard unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return (x * (UNIT)) / (y);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * decimal in the precision unit specified in the parameter.\\n     *\\n     * @dev y is divided after the product of x and the specified precision unit\\n     * is evaluated, so the product of x and the specified precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function _divideDecimalRound(\\n        uint x,\\n        uint y,\\n        uint precisionUnit\\n    ) private pure returns (uint) {\\n        uint resultTimesTen = (x * (precisionUnit * 10)) / (y);\\n\\n        if (resultTimesTen % 10 >= 5) {\\n            resultTimesTen += 10;\\n        }\\n\\n        return resultTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * standard precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and the standard precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * high precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the high precision unit\\n     * is evaluated, so the product of x and the high precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRoundPrecise(\\n        uint x,\\n        uint y\\n    ) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Convert a standard decimal representation to a high precision one.\\n     */\\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\\n        return i * (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\n    }\\n\\n    /**\\n     * @dev Convert a high precision decimal to a standard decimal representation.\\n     */\\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\\n        uint quotientTimesTen = i /\\n            (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    // Computes `a - b`, setting the value to 0 if b > a.\\n    function floorsub(uint a, uint b) internal pure returns (uint) {\\n        return b >= a ? 0 : a - b;\\n    }\\n\\n    /* ---------- Utilities ---------- */\\n    /*\\n     * Absolute value of the input, returned as a signed number.\\n     */\\n    function signedAbs(int x) internal pure returns (int) {\\n        return x < 0 ? -x : x;\\n    }\\n\\n    /*\\n     * Absolute value of the input, returned as an unsigned number.\\n     */\\n    function abs(int x) internal pure returns (uint) {\\n        return uint(signedAbs(x));\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.17\"},\"src/interfaces/IFlexibleStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IFlexibleStorage {\\n    // Views\\n    function getUIntValue(\\n        bytes32 contractName,\\n        bytes32 record\\n    ) external view returns (uint);\\n\\n    function getUIntValues(\\n        bytes32 contractName,\\n        bytes32[] calldata records\\n    ) external view returns (uint[] memory);\\n\\n    function getIntValue(\\n        bytes32 contractName,\\n        bytes32 record\\n    ) external view returns (int);\\n\\n    function getIntValues(\\n        bytes32 contractName,\\n        bytes32[] calldata records\\n    ) external view returns (int[] memory);\\n\\n    function getAddressValue(\\n        bytes32 contractName,\\n        bytes32 record\\n    ) external view returns (address);\\n\\n    function getAddressValues(\\n        bytes32 contractName,\\n        bytes32[] calldata records\\n    ) external view returns (address[] memory);\\n\\n    function getBoolValue(\\n        bytes32 contractName,\\n        bytes32 record\\n    ) external view returns (bool);\\n\\n    function getBoolValues(\\n        bytes32 contractName,\\n        bytes32[] calldata records\\n    ) external view returns (bool[] memory);\\n\\n    function getBytes32Value(\\n        bytes32 contractName,\\n        bytes32 record\\n    ) external view returns (bytes32);\\n\\n    function getBytes32Values(\\n        bytes32 contractName,\\n        bytes32[] calldata records\\n    ) external view returns (bytes32[] memory);\\n\\n    // Mutative functions\\n    function deleteUIntValue(bytes32 contractName, bytes32 record) external;\\n\\n    function deleteIntValue(bytes32 contractName, bytes32 record) external;\\n\\n    function deleteAddressValue(bytes32 contractName, bytes32 record) external;\\n\\n    function deleteBoolValue(bytes32 contractName, bytes32 record) external;\\n\\n    function deleteBytes32Value(bytes32 contractName, bytes32 record) external;\\n\\n    function setUIntValue(\\n        bytes32 contractName,\\n        bytes32 record,\\n        uint value\\n    ) external;\\n\\n    function setUIntValues(\\n        bytes32 contractName,\\n        bytes32[] calldata records,\\n        uint[] calldata values\\n    ) external;\\n\\n    function setIntValue(\\n        bytes32 contractName,\\n        bytes32 record,\\n        int value\\n    ) external;\\n\\n    function setIntValues(\\n        bytes32 contractName,\\n        bytes32[] calldata records,\\n        int[] calldata values\\n    ) external;\\n\\n    function setAddressValue(\\n        bytes32 contractName,\\n        bytes32 record,\\n        address value\\n    ) external;\\n\\n    function setAddressValues(\\n        bytes32 contractName,\\n        bytes32[] calldata records,\\n        address[] calldata values\\n    ) external;\\n\\n    function setBoolValue(\\n        bytes32 contractName,\\n        bytes32 record,\\n        bool value\\n    ) external;\\n\\n    function setBoolValues(\\n        bytes32 contractName,\\n        bytes32[] calldata records,\\n        bool[] calldata values\\n    ) external;\\n\\n    function setBytes32Value(\\n        bytes32 contractName,\\n        bytes32 record,\\n        bytes32 value\\n    ) external;\\n\\n    function setBytes32Values(\\n        bytes32 contractName,\\n        bytes32[] calldata records,\\n        bytes32[] calldata values\\n    ) external;\\n}\\n\",\"versionPragma\":\"^0.8.17\"},\"src/interfaces/ISynth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface ISynth {\\n    // Views\\n    function currencyKey() external view returns (bytes32);\\n\\n    function transferableSynths(address account) external view returns (uint);\\n\\n    // Mutative functions\\n    function transferAndSettle(address to, uint value) external returns (bool);\\n\\n    function transferFromAndSettle(\\n        address from,\\n        address to,\\n        uint value\\n    ) external returns (bool);\\n\\n    // Restricted: used internally to Synthetix\\n    function burn(address account, uint amount) external;\\n\\n    function issue(address account, uint amount) external;\\n}\\n\",\"versionPragma\":\"^0.8.17\"},\"src/interfaces/IIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"../interfaces/ISynth.sol\\\";\\n\\ninterface IIssuer {\\n    // Views\\n\\n    function allNetworksDebtInfo()\\n        external\\n        view\\n        returns (uint256 debt, uint256 sharesSupply, bool isStale);\\n\\n    function anySynthOrSNXRateIsInvalid()\\n        external\\n        view\\n        returns (bool anyRateInvalid);\\n\\n    function availableCurrencyKeys() external view returns (bytes32[] memory);\\n\\n    function availableSynthCount() external view returns (uint);\\n\\n    function availableSynths(uint index) external view returns (ISynth);\\n\\n    function canBurnSynths(address account) external view returns (bool);\\n\\n    function collateral(address account) external view returns (uint);\\n\\n    function collateralisationRatio(\\n        address issuer\\n    ) external view returns (uint);\\n\\n    function collateralisationRatioAndAnyRatesInvalid(\\n        address _issuer\\n    ) external view returns (uint cratio, bool anyRateIsInvalid);\\n\\n    function debtBalanceOf(\\n        address issuer,\\n        bytes32 currencyKey\\n    ) external view returns (uint debtBalance);\\n\\n    function issuanceRatio() external view returns (uint);\\n\\n    function lastIssueEvent(address account) external view returns (uint);\\n\\n    function maxIssuableSynths(\\n        address issuer\\n    ) external view returns (uint maxIssuable);\\n\\n    function minimumStakeTime() external view returns (uint);\\n\\n    function remainingIssuableSynths(\\n        address issuer\\n    )\\n        external\\n        view\\n        returns (uint maxIssuable, uint alreadyIssued, uint totalSystemDebt);\\n\\n    function synths(bytes32 currencyKey) external view returns (ISynth);\\n\\n    function getSynths(\\n        bytes32[] calldata currencyKeys\\n    ) external view returns (ISynth[] memory);\\n\\n    function synthsByAddress(\\n        address synthAddress\\n    ) external view returns (bytes32);\\n\\n    function totalIssuedSynths(\\n        bytes32 currencyKey,\\n        bool excludeOtherCollateral\\n    ) external view returns (uint);\\n\\n    function transferableSynthetixAndAnyRateIsInvalid(\\n        address account,\\n        uint balance\\n    ) external view returns (uint transferable, bool anyRateIsInvalid);\\n\\n    function liquidationAmounts(\\n        address account,\\n        bool isSelfLiquidation\\n    )\\n        external\\n        view\\n        returns (\\n            uint totalRedeemed,\\n            uint debtToRemove,\\n            uint escrowToLiquidate,\\n            uint initialDebtBalance\\n        );\\n\\n    // Restricted: used internally to Synthetix\\n    function addSynths(ISynth[] calldata synthsToAdd) external;\\n\\n    function issueSynths(address from, uint amount) external;\\n\\n    function issueSynthsOnBehalf(\\n        address issueFor,\\n        address from,\\n        uint amount\\n    ) external;\\n\\n    function issueMaxSynths(address from) external;\\n\\n    function issueMaxSynthsOnBehalf(address issueFor, address from) external;\\n\\n    function burnSynths(address from, uint amount) external;\\n\\n    function burnSynthsOnBehalf(\\n        address burnForAddress,\\n        address from,\\n        uint amount\\n    ) external;\\n\\n    function burnSynthsToTarget(address from) external;\\n\\n    function burnSynthsToTargetOnBehalf(\\n        address burnForAddress,\\n        address from\\n    ) external;\\n\\n    function burnForRedemption(\\n        address deprecatedSynthProxy,\\n        address account,\\n        uint balance\\n    ) external;\\n\\n    function setCurrentPeriodId(uint128 periodId) external;\\n\\n    function liquidateAccount(\\n        address account,\\n        bool isSelfLiquidation\\n    )\\n        external\\n        returns (uint totalRedeemed, uint debtRemoved, uint escrowToLiquidate);\\n\\n    function issueSynthsWithoutDebt(\\n        bytes32 currencyKey,\\n        address to,\\n        uint amount\\n    ) external returns (bool rateInvalid);\\n\\n    function burnSynthsWithoutDebt(\\n        bytes32 currencyKey,\\n        address to,\\n        uint amount\\n    ) external returns (bool rateInvalid);\\n\\n    function modifyDebtSharesForMigration(\\n        address account,\\n        uint amount\\n    ) external;\\n}\\n\",\"versionPragma\":\"^0.8.17\"},\"src/contracts/MixinResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./AddressResolver.sol\\\";\\n\\ncontract MixinResolver {\\n    AddressResolver public resolver;\\n\\n    mapping(bytes32 => address) private addressCache;\\n\\n    constructor(address _resolver) {\\n        resolver = AddressResolver(_resolver);\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function combineArrays(\\n        bytes32[] memory first,\\n        bytes32[] memory second\\n    ) internal pure returns (bytes32[] memory combination) {\\n        combination = new bytes32[](first.length + second.length);\\n\\n        for (uint i = 0; i < first.length; i++) {\\n            combination[i] = first[i];\\n        }\\n\\n        for (uint j = 0; j < second.length; j++) {\\n            combination[first.length + j] = second[j];\\n        }\\n    }\\n\\n    /* ========== PUBLIC FUNCTIONS ========== */\\n\\n    // Note: this function is public not external in order for it to be overridden and invoked via super in subclasses\\n    function resolverAddressesRequired()\\n        public\\n        view\\n        virtual\\n        returns (bytes32[] memory addresses)\\n    {}\\n\\n    function rebuildCache() public {\\n        bytes32[] memory requiredAddresses = resolverAddressesRequired();\\n        // The resolver must call this function whenver it updates its state\\n        for (uint i = 0; i < requiredAddresses.length; i++) {\\n            bytes32 name = requiredAddresses[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            address destination = resolver.requireAndGetAddress(\\n                name,\\n                string(abi.encodePacked(\\\"Resolver missing target: \\\", name))\\n            );\\n            addressCache[name] = destination;\\n            emit CacheUpdated(name, destination);\\n        }\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory requiredAddresses = resolverAddressesRequired();\\n        for (uint i = 0; i < requiredAddresses.length; i++) {\\n            bytes32 name = requiredAddresses[i];\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (\\n                resolver.getAddress(name) != addressCache[name] ||\\n                addressCache[name] == address(0)\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function requireAndGetAddress(\\n        bytes32 name\\n    ) internal view returns (address) {\\n        address _foundAddress = addressCache[name];\\n        require(\\n            _foundAddress != address(0),\\n            string(abi.encodePacked(\\\"Missing address: \\\", name))\\n        );\\n        return _foundAddress;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event CacheUpdated(bytes32 name, address destination);\\n}\\n\",\"versionPragma\":\"^0.8.17\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"src/contracts/AddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./MixinResolver.sol\\\";\\n\\nimport \\\"../interfaces/IIssuer.sol\\\";\\n\\ncontract AddressResolver is Ownable {\\n    mapping(bytes32 => address) public repository;\\n\\n    constructor(address _owner) Ownable(_owner) {}\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function importAddresses(\\n        bytes32[] calldata names,\\n        address[] calldata destinations\\n    ) external onlyOwner {\\n        require(\\n            names.length == destinations.length,\\n            \\\"Input lengths must match\\\"\\n        );\\n\\n        for (uint i = 0; i < names.length; i++) {\\n            bytes32 name = names[i];\\n            address destination = destinations[i];\\n            repository[name] = destination;\\n            emit AddressImported(name, destination);\\n        }\\n    }\\n\\n    /* ========= PUBLIC FUNCTIONS ========== */\\n\\n    function rebuildCaches(MixinResolver[] calldata destinations) external {\\n        for (uint i = 0; i < destinations.length; i++) {\\n            destinations[i].rebuildCache();\\n        }\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function areAddressesImported(\\n        bytes32[] calldata names,\\n        address[] calldata destinations\\n    ) external view returns (bool) {\\n        for (uint i = 0; i < names.length; i++) {\\n            if (repository[names[i]] != destinations[i]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function getAddress(bytes32 name) external view returns (address) {\\n        return repository[name];\\n    }\\n\\n    function requireAndGetAddress(\\n        bytes32 name,\\n        string calldata reason\\n    ) external view returns (address) {\\n        address _foundAddress = repository[name];\\n        // require(_foundAddress != address(0), reason); // ---\\n        return _foundAddress;\\n    }\\n\\n    function getSynth(bytes32 key) external view returns (address) {\\n        IIssuer issuer = IIssuer(repository[\\\"Issuer\\\"]);\\n        require(address(issuer) != address(0), \\\"Cannot find Issuer address\\\");\\n        return address(issuer.synths(key));\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event AddressImported(bytes32 name, address destination);\\n}\\n\",\"versionPragma\":\"^0.8.17\"},\"src/contracts/MixinSystemSettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./MixinResolver.sol\\\";\\n\\nimport \\\"../interfaces/IFlexibleStorage.sol\\\";\\n\\ncontract MixinSystemSettings is MixinResolver {\\n    // must match the one defined SystemSettingsLib, defined in both places due to sol v0.5 limitations\\n    bytes32 internal constant SETTING_CONTRACT_NAME = \\\"SystemSettings\\\";\\n\\n    bytes32 internal constant SETTING_WAITING_PERIOD_SECS = \\\"waitingPeriodSecs\\\";\\n    bytes32 internal constant SETTING_PRICE_DEVIATION_THRESHOLD_FACTOR =\\n        \\\"priceDeviationThresholdFactor\\\";\\n    bytes32 internal constant SETTING_ISSUANCE_RATIO = \\\"issuanceRatio\\\";\\n    bytes32 internal constant SETTING_FEE_PERIOD_DURATION = \\\"feePeriodDuration\\\";\\n    bytes32 internal constant SETTING_TARGET_THRESHOLD = \\\"targetThreshold\\\";\\n    bytes32 internal constant SETTING_LIQUIDATION_DELAY = \\\"liquidationDelay\\\";\\n    bytes32 internal constant SETTING_LIQUIDATION_RATIO = \\\"liquidationRatio\\\";\\n    bytes32 internal constant SETTING_LIQUIDATION_ESCROW_DURATION =\\n        \\\"liquidationEscrowDuration\\\";\\n    bytes32 internal constant SETTING_LIQUIDATION_PENALTY =\\n        \\\"liquidationPenalty\\\";\\n    bytes32 internal constant SETTING_SNX_LIQUIDATION_PENALTY =\\n        \\\"snxLiquidationPenalty\\\";\\n    bytes32 internal constant SETTING_SELF_LIQUIDATION_PENALTY =\\n        \\\"selfLiquidationPenalty\\\";\\n    bytes32 internal constant SETTING_FLAG_REWARD = \\\"flagReward\\\";\\n    bytes32 internal constant SETTING_LIQUIDATE_REWARD = \\\"liquidateReward\\\";\\n    bytes32 internal constant SETTING_RATE_STALE_PERIOD = \\\"rateStalePeriod\\\";\\n    /* ========== Exchange Fees Related ========== */\\n    bytes32 internal constant SETTING_EXCHANGE_FEE_RATE = \\\"exchangeFeeRate\\\";\\n    bytes32 internal constant SETTING_EXCHANGE_DYNAMIC_FEE_THRESHOLD =\\n        \\\"exchangeDynamicFeeThreshold\\\";\\n    bytes32 internal constant SETTING_EXCHANGE_DYNAMIC_FEE_WEIGHT_DECAY =\\n        \\\"exchangeDynamicFeeWeightDecay\\\";\\n    bytes32 internal constant SETTING_EXCHANGE_DYNAMIC_FEE_ROUNDS =\\n        \\\"exchangeDynamicFeeRounds\\\";\\n    bytes32 internal constant SETTING_EXCHANGE_MAX_DYNAMIC_FEE =\\n        \\\"exchangeMaxDynamicFee\\\";\\n    /* ========== End Exchange Fees Related ========== */\\n    bytes32 internal constant SETTING_MINIMUM_STAKE_TIME = \\\"minimumStakeTime\\\";\\n    bytes32 internal constant SETTING_AGGREGATOR_WARNING_FLAGS =\\n        \\\"aggregatorWarningFlags\\\";\\n    bytes32 internal constant SETTING_TRADING_REWARDS_ENABLED =\\n        \\\"tradingRewardsEnabled\\\";\\n    bytes32 internal constant SETTING_DEBT_SNAPSHOT_STALE_TIME =\\n        \\\"debtSnapshotStaleTime\\\";\\n    bytes32 internal constant SETTING_CROSS_DOMAIN_DEPOSIT_GAS_LIMIT =\\n        \\\"crossDomainDepositGasLimit\\\";\\n    bytes32 internal constant SETTING_CROSS_DOMAIN_ESCROW_GAS_LIMIT =\\n        \\\"crossDomainEscrowGasLimit\\\";\\n    bytes32 internal constant SETTING_CROSS_DOMAIN_REWARD_GAS_LIMIT =\\n        \\\"crossDomainRewardGasLimit\\\";\\n    bytes32 internal constant SETTING_CROSS_DOMAIN_WITHDRAWAL_GAS_LIMIT =\\n        \\\"crossDomainWithdrawalGasLimit\\\";\\n    bytes32 internal constant SETTING_CROSS_DOMAIN_FEE_PERIOD_CLOSE_GAS_LIMIT =\\n        \\\"crossDomainCloseGasLimit\\\";\\n    bytes32 internal constant SETTING_CROSS_DOMAIN_RELAY_GAS_LIMIT =\\n        \\\"crossDomainRelayGasLimit\\\";\\n    bytes32 internal constant SETTING_ETHER_WRAPPER_MAX_ETH =\\n        \\\"etherWrapperMaxETH\\\";\\n    bytes32 internal constant SETTING_ETHER_WRAPPER_MINT_FEE_RATE =\\n        \\\"etherWrapperMintFeeRate\\\";\\n    bytes32 internal constant SETTING_ETHER_WRAPPER_BURN_FEE_RATE =\\n        \\\"etherWrapperBurnFeeRate\\\";\\n    bytes32 internal constant SETTING_WRAPPER_MAX_TOKEN_AMOUNT =\\n        \\\"wrapperMaxTokens\\\";\\n    bytes32 internal constant SETTING_WRAPPER_MINT_FEE_RATE =\\n        \\\"wrapperMintFeeRate\\\";\\n    bytes32 internal constant SETTING_WRAPPER_BURN_FEE_RATE =\\n        \\\"wrapperBurnFeeRate\\\";\\n    bytes32 internal constant SETTING_INTERACTION_DELAY = \\\"interactionDelay\\\";\\n    bytes32 internal constant SETTING_COLLAPSE_FEE_RATE = \\\"collapseFeeRate\\\";\\n    bytes32 internal constant SETTING_ATOMIC_MAX_VOLUME_PER_BLOCK =\\n        \\\"atomicMaxVolumePerBlock\\\";\\n    bytes32 internal constant SETTING_ATOMIC_TWAP_WINDOW = \\\"atomicTwapWindow\\\";\\n    bytes32 internal constant SETTING_ATOMIC_EQUIVALENT_FOR_DEX_PRICING =\\n        \\\"atomicEquivalentForDexPricing\\\";\\n    bytes32 internal constant SETTING_ATOMIC_EXCHANGE_FEE_RATE =\\n        \\\"atomicExchangeFeeRate\\\";\\n    bytes32 internal constant SETTING_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW =\\n        \\\"atomicVolConsiderationWindow\\\";\\n    bytes32 internal constant SETTING_ATOMIC_VOLATILITY_UPDATE_THRESHOLD =\\n        \\\"atomicVolUpdateThreshold\\\";\\n    bytes32\\n        internal constant SETTING_PURE_CHAINLINK_PRICE_FOR_ATOMIC_SWAPS_ENABLED =\\n        \\\"pureChainlinkForAtomicsEnabled\\\";\\n    bytes32 internal constant SETTING_CROSS_SYNTH_TRANSFER_ENABLED =\\n        \\\"crossChainSynthTransferEnabled\\\";\\n\\n    bytes32 internal constant CONTRACT_FLEXIBLESTORAGE = \\\"FlexibleStorage\\\";\\n\\n    enum CrossDomainMessageGasLimits {\\n        Deposit,\\n        Escrow,\\n        Reward,\\n        Withdrawal,\\n        CloseFeePeriod,\\n        Relay\\n    }\\n\\n    struct DynamicFeeConfig {\\n        uint threshold;\\n        uint weightDecay;\\n        uint rounds;\\n        uint maxFee;\\n    }\\n\\n    constructor(address _resolver) MixinResolver(_resolver) {}\\n\\n    function resolverAddressesRequired()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bytes32[] memory addresses)\\n    {\\n        addresses = new bytes32[](1);\\n        addresses[0] = CONTRACT_FLEXIBLESTORAGE;\\n    }\\n\\n    function flexibleStorage() internal view returns (IFlexibleStorage) {\\n        return IFlexibleStorage(requireAndGetAddress(CONTRACT_FLEXIBLESTORAGE));\\n    }\\n\\n    function _getGasLimitSetting(\\n        CrossDomainMessageGasLimits gasLimitType\\n    ) internal pure returns (bytes32) {\\n        if (gasLimitType == CrossDomainMessageGasLimits.Deposit) {\\n            return SETTING_CROSS_DOMAIN_DEPOSIT_GAS_LIMIT;\\n        } else if (gasLimitType == CrossDomainMessageGasLimits.Escrow) {\\n            return SETTING_CROSS_DOMAIN_ESCROW_GAS_LIMIT;\\n        } else if (gasLimitType == CrossDomainMessageGasLimits.Reward) {\\n            return SETTING_CROSS_DOMAIN_REWARD_GAS_LIMIT;\\n        } else if (gasLimitType == CrossDomainMessageGasLimits.Withdrawal) {\\n            return SETTING_CROSS_DOMAIN_WITHDRAWAL_GAS_LIMIT;\\n        } else if (gasLimitType == CrossDomainMessageGasLimits.Relay) {\\n            return SETTING_CROSS_DOMAIN_RELAY_GAS_LIMIT;\\n        } else if (gasLimitType == CrossDomainMessageGasLimits.CloseFeePeriod) {\\n            return SETTING_CROSS_DOMAIN_FEE_PERIOD_CLOSE_GAS_LIMIT;\\n        } else {\\n            revert(\\\"Unknown gas limit type\\\");\\n        }\\n    }\\n\\n    function getCrossDomainMessageGasLimit(\\n        CrossDomainMessageGasLimits gasLimitType\\n    ) internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                _getGasLimitSetting(gasLimitType)\\n            );\\n    }\\n\\n    function getTradingRewardsEnabled() internal view returns (bool) {\\n        return\\n            flexibleStorage().getBoolValue(\\n                SETTING_CONTRACT_NAME,\\n                SETTING_TRADING_REWARDS_ENABLED\\n            );\\n    }\\n\\n    function getWaitingPeriodSecs() internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                SETTING_WAITING_PERIOD_SECS\\n            );\\n    }\\n\\n    function getPriceDeviationThresholdFactor() internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                SETTING_PRICE_DEVIATION_THRESHOLD_FACTOR\\n            );\\n    }\\n\\n    function getIssuanceRatio() internal view returns (uint) {\\n        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                SETTING_ISSUANCE_RATIO\\n            );\\n    }\\n\\n    function getFeePeriodDuration() internal view returns (uint) {\\n        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                SETTING_FEE_PERIOD_DURATION\\n            );\\n    }\\n\\n    function getTargetThreshold() internal view returns (uint) {\\n        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                SETTING_TARGET_THRESHOLD\\n            );\\n    }\\n\\n    function getLiquidationDelay() internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                SETTING_LIQUIDATION_DELAY\\n            );\\n    }\\n\\n    function getLiquidationRatio() internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                SETTING_LIQUIDATION_RATIO\\n            );\\n    }\\n\\n    function getLiquidationEscrowDuration() internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                SETTING_LIQUIDATION_ESCROW_DURATION\\n            );\\n    }\\n\\n    function getLiquidationPenalty() internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                SETTING_LIQUIDATION_PENALTY\\n            );\\n    }\\n\\n    function getSnxLiquidationPenalty() internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                SETTING_SNX_LIQUIDATION_PENALTY\\n            );\\n    }\\n\\n    function getSelfLiquidationPenalty() internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                SETTING_SELF_LIQUIDATION_PENALTY\\n            );\\n    }\\n\\n    function getFlagReward() internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                SETTING_FLAG_REWARD\\n            );\\n    }\\n\\n    function getLiquidateReward() internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                SETTING_LIQUIDATE_REWARD\\n            );\\n    }\\n\\n    function getRateStalePeriod() internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                SETTING_RATE_STALE_PERIOD\\n            );\\n    }\\n\\n    /* ========== Exchange Related Fees ========== */\\n    function getExchangeFeeRate(\\n        bytes32 currencyKey\\n    ) internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                keccak256(\\n                    abi.encodePacked(SETTING_EXCHANGE_FEE_RATE, currencyKey)\\n                )\\n            );\\n    }\\n\\n    /// @notice Get exchange dynamic fee related keys\\n    /// @return threshold, weight decay, rounds, and max fee\\n    function getExchangeDynamicFeeConfig()\\n        internal\\n        view\\n        returns (DynamicFeeConfig memory)\\n    {\\n        bytes32[] memory keys = new bytes32[](4);\\n        keys[0] = SETTING_EXCHANGE_DYNAMIC_FEE_THRESHOLD;\\n        keys[1] = SETTING_EXCHANGE_DYNAMIC_FEE_WEIGHT_DECAY;\\n        keys[2] = SETTING_EXCHANGE_DYNAMIC_FEE_ROUNDS;\\n        keys[3] = SETTING_EXCHANGE_MAX_DYNAMIC_FEE;\\n        uint[] memory values = flexibleStorage().getUIntValues(\\n            SETTING_CONTRACT_NAME,\\n            keys\\n        );\\n        return\\n            DynamicFeeConfig({\\n                threshold: values[0],\\n                weightDecay: values[1],\\n                rounds: values[2],\\n                maxFee: values[3]\\n            });\\n    }\\n\\n    /* ========== End Exchange Related Fees ========== */\\n\\n    function getMinimumStakeTime() internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                SETTING_MINIMUM_STAKE_TIME\\n            );\\n    }\\n\\n    function getAggregatorWarningFlags() internal view returns (address) {\\n        return\\n            flexibleStorage().getAddressValue(\\n                SETTING_CONTRACT_NAME,\\n                SETTING_AGGREGATOR_WARNING_FLAGS\\n            );\\n    }\\n\\n    function getDebtSnapshotStaleTime() internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                SETTING_DEBT_SNAPSHOT_STALE_TIME\\n            );\\n    }\\n\\n    function getEtherWrapperMaxETH() internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                SETTING_ETHER_WRAPPER_MAX_ETH\\n            );\\n    }\\n\\n    function getEtherWrapperMintFeeRate() internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                SETTING_ETHER_WRAPPER_MINT_FEE_RATE\\n            );\\n    }\\n\\n    function getEtherWrapperBurnFeeRate() internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                SETTING_ETHER_WRAPPER_BURN_FEE_RATE\\n            );\\n    }\\n\\n    function getWrapperMaxTokenAmount(\\n        address wrapper\\n    ) internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                keccak256(\\n                    abi.encodePacked(SETTING_WRAPPER_MAX_TOKEN_AMOUNT, wrapper)\\n                )\\n            );\\n    }\\n\\n    function getWrapperMintFeeRate(\\n        address wrapper\\n    ) internal view returns (int) {\\n        return\\n            flexibleStorage().getIntValue(\\n                SETTING_CONTRACT_NAME,\\n                keccak256(\\n                    abi.encodePacked(SETTING_WRAPPER_MINT_FEE_RATE, wrapper)\\n                )\\n            );\\n    }\\n\\n    function getWrapperBurnFeeRate(\\n        address wrapper\\n    ) internal view returns (int) {\\n        return\\n            flexibleStorage().getIntValue(\\n                SETTING_CONTRACT_NAME,\\n                keccak256(\\n                    abi.encodePacked(SETTING_WRAPPER_BURN_FEE_RATE, wrapper)\\n                )\\n            );\\n    }\\n\\n    function getInteractionDelay(\\n        address collateral\\n    ) internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                keccak256(\\n                    abi.encodePacked(SETTING_INTERACTION_DELAY, collateral)\\n                )\\n            );\\n    }\\n\\n    function getCollapseFeeRate(\\n        address collateral\\n    ) internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                keccak256(\\n                    abi.encodePacked(SETTING_COLLAPSE_FEE_RATE, collateral)\\n                )\\n            );\\n    }\\n\\n    function getAtomicMaxVolumePerBlock() internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                SETTING_ATOMIC_MAX_VOLUME_PER_BLOCK\\n            );\\n    }\\n\\n    function getAtomicTwapWindow() internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                SETTING_ATOMIC_TWAP_WINDOW\\n            );\\n    }\\n\\n    function getAtomicEquivalentForDexPricing(\\n        bytes32 currencyKey\\n    ) internal view returns (address) {\\n        return\\n            flexibleStorage().getAddressValue(\\n                SETTING_CONTRACT_NAME,\\n                keccak256(\\n                    abi.encodePacked(\\n                        SETTING_ATOMIC_EQUIVALENT_FOR_DEX_PRICING,\\n                        currencyKey\\n                    )\\n                )\\n            );\\n    }\\n\\n    function getAtomicExchangeFeeRate(\\n        bytes32 currencyKey\\n    ) internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                keccak256(\\n                    abi.encodePacked(\\n                        SETTING_ATOMIC_EXCHANGE_FEE_RATE,\\n                        currencyKey\\n                    )\\n                )\\n            );\\n    }\\n\\n    function getAtomicVolatilityConsiderationWindow(\\n        bytes32 currencyKey\\n    ) internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                keccak256(\\n                    abi.encodePacked(\\n                        SETTING_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW,\\n                        currencyKey\\n                    )\\n                )\\n            );\\n    }\\n\\n    function getAtomicVolatilityUpdateThreshold(\\n        bytes32 currencyKey\\n    ) internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                keccak256(\\n                    abi.encodePacked(\\n                        SETTING_ATOMIC_VOLATILITY_UPDATE_THRESHOLD,\\n                        currencyKey\\n                    )\\n                )\\n            );\\n    }\\n\\n    function getPureChainlinkPriceForAtomicSwapsEnabled(\\n        bytes32 currencyKey\\n    ) internal view returns (bool) {\\n        return\\n            flexibleStorage().getBoolValue(\\n                SETTING_CONTRACT_NAME,\\n                keccak256(\\n                    abi.encodePacked(\\n                        SETTING_PURE_CHAINLINK_PRICE_FOR_ATOMIC_SWAPS_ENABLED,\\n                        currencyKey\\n                    )\\n                )\\n            );\\n    }\\n\\n    function getCrossChainSynthTransferEnabled(\\n        bytes32 currencyKey\\n    ) internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                keccak256(\\n                    abi.encodePacked(\\n                        SETTING_CROSS_SYNTH_TRANSFER_ENABLED,\\n                        currencyKey\\n                    )\\n                )\\n            );\\n    }\\n\\n    function getExchangeMaxDynamicFee() internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                SETTING_EXCHANGE_MAX_DYNAMIC_FEE\\n            );\\n    }\\n\\n    function getExchangeDynamicFeeRounds() internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                SETTING_EXCHANGE_DYNAMIC_FEE_ROUNDS\\n            );\\n    }\\n\\n    function getExchangeDynamicFeeThreshold() internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                SETTING_EXCHANGE_DYNAMIC_FEE_THRESHOLD\\n            );\\n    }\\n\\n    function getExchangeDynamicFeeWeightDecay() internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                SETTING_EXCHANGE_DYNAMIC_FEE_WEIGHT_DECAY\\n            );\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.17\"},\"@chainlink/contracts/src/v0.8/interfaces/FlagsInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface FlagsInterface {\\n  function getFlag(address) external view returns (bool);\\n\\n  function getFlags(address[] calldata) external view returns (bool[] memory);\\n\\n  function raiseFlag(address) external;\\n\\n  function raiseFlags(address[] calldata) external;\\n\\n  function lowerFlags(address[] calldata) external;\\n\\n  function setRaisingAccessController(address) external;\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"versionPragma\":\"^0.8.0\"}}}","address":"0x7a41551a990730F7f9858e5757b7cAf697e195E5","bytecode":"0x60806040523480156200001157600080fd5b506040516200314f3803806200314f833981016040819052620000349162000109565b8080836001600160a01b0381166200006657604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b62000071816200009c565b50600180546001600160a01b0319166001600160a01b03929092169190911790555062000141915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200010457600080fd5b919050565b600080604083850312156200011d57600080fd5b6200012883620000ec565b91506200013860208401620000ec565b90509250929050565b612ffe80620001516000396000f3fe608060405234801561001057600080fd5b50600436106101d75760003560e01c80629919c0146101dc578063045056f81461020457806304f3bcec14610234578063055286e01461025457806305a046e5146102875780630a7d36d1146102a75780630c71cd23146102ba5780630ee4951b146102e2578063109e46a2146102f85780632528f0fe1461030b5780632678df961461031e57806326bd30fa1461033e5780632af64bd3146103515780632bed9e0c1461035957806338aa1b991461036e5780633f0e084f146103815780634308a94f146103945780634c36b837146103bc5780634f72def6146103c4578063614d08f8146103d7578063654a60ac146103ee5780636ce66c80146104015780637103353e1461042f578063715018a61461045857806374185360146104605780637a018a1e146104685780638295016a1461047b5780638661cc7b1461048e578063899ffef4146104a15780638da5cb5b146104a9578063ac82f608146104b1578063b295ad34146104c4578063c2c8a676146104f9578063c8e5bbd51461050c578063ce8480ea1461052d578063d89ee86114610540578063ed76245014610553578063f2fde38b14610574578063fce132f914610587578063fdadbc7e14610595575b600080fd5b6101ef6101ea3660046126de565b6105a8565b60405190151581526020015b60405180910390f35b6102176102123660046126de565b6105c1565b6040805193845291151560208401521515908201526060016101fb565b600154610247906001600160a01b031681565b6040516101fb91906126f7565b61026761026236600461270b565b61074e565b6040805194855260208501939093529183015260608201526080016101fb565b61029a61029536600461277b565b610765565b6040516101fb91906127f7565b6101ef6102b536600461277b565b610810565b6102cd6102c83660046126de565b610950565b604080519283529015156020830152016101fb565b6102ea6109e4565b6040519081526020016101fb565b6102ea61030636600461280a565b6109f3565b6101ef6103193660046126de565b610a4b565b61033161032c36600461285c565b610a57565b6040516101fb9190612879565b61026761034c3660046129e3565b610b3b565b6101ef610b54565b61036c6103673660046126de565b610c65565b005b6101ef61037c3660046126de565b610d51565b61036c61038f366004612a37565b610d5f565b6103a76103a23660046126de565b610fc1565b604080519283526020830191909152016101fb565b610247610ff4565b6102ea6103d23660046126de565b610ffe565b6102ea6c45786368616e6765526174657360981b81565b6102ea6103fc36600461270b565b61101f565b61041461040f366004612a67565b611037565b604080519384526020840192909252908201526060016101fb565b61024761043d3660046126de565b6003602052600090815260409020546001600160a01b031681565b61036c61108f565b61036c6110a3565b6102ea6104763660046126de565b611223565b61041461048936600461270b565b61122e565b6101ef61049c3660046126de565b61124e565b61033161125d565b6102476112d1565b6102ea6104bf3660046126de565b6112e0565b6104e76104d23660046126de565b60046020526000908152604090205460ff1681565b60405160ff90911681526020016101fb565b61029a61050736600461277b565b6112fb565b61051f61051a36600461277b565b61139e565b6040516101fb929190612aa2565b6102ea61053b3660046126de565b611524565b6101ef61054e366004612ac6565b61152f565b61056661056136600461270b565b6116e0565b6040516101fb929190612b31565b61036c61058236600461285c565b61180d565b6101ef61049c366004612b56565b6103a76105a3366004612b73565b61184b565b60006105bb826105b6611864565b611901565b92915050565b600081815260036020526040812054819081906001600160a01b0316631cd554d160e21b8514806105fa57506001600160a01b03811615155b6106455760405162461bcd60e51b8152602060048201526017602482015276139bc81859d9dc9959d85d1bdc88199bdc88185cdcd95d604a1b60448201526064015b60405180910390fd5b600061065086611932565b9050631cd554d160e21b860361067a57516001600160d81b03169350600092508291506107479050565b80516001600160d81b0316945061068f611a91565b815160405163413caeb560e01b81526001600160a01b0385811660048301526001600160d81b03909216602482015291169063413caeb5906044016020604051808303816000875af11580156106e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070d9190612ba5565b935061072b61071a611864565b826020015164ffffffffff16611aad565b8061074257506107428661073d611ac2565b611b66565b925050505b9193909250565b60008060008061075c611c26565b93509350935093565b60606000826001600160401b03811115610781576107816128bd565b6040519080825280602002602001820160405280156107aa578160200160208202803683370190505b50905060005b83811015610808576107d98585838181106107cd576107cd612bc0565b90506020020135611c6c565b8282815181106107eb576107eb612bc0565b60209081029190910101528061080081612bec565b9150506107b0565b509392505050565b60008061081b611864565b9050600061085b858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611c8892505050565b905060005b8481101561094457631cd554d160e21b86868381811061088257610882612bc0565b9050602002013503156109325760006108b28787848181106108a6576108a6612bc0565b90506020020135611932565b90508282815181106108c6576108c6612bc0565b6020026020010151806108e957506108e984826020015164ffffffffff16611aad565b8061091e575061091e87878481811061090457610904612bc0565b9050602002013582600001516001600160d81b0316611e37565b156109305760019450505050506105bb565b505b8061093c81612bec565b915050610860565b50600095945050505050565b600080600061095e84611932565b9050631cd554d160e21b840361098257516001600160d81b03169360009350915050565b80516109a061098f611864565b836020015164ffffffffff16611aad565b806109b257506109b28561073d611ac2565b806109cf57506109cf8583600001516001600160d81b0316611e37565b6001600160d81b039091169590945092505050565b60006109ee611864565b905090565b600083815b610a0c87610a07846001612c05565b611ec2565b915050801580610a245750610a218486612c05565b81115b15610a3157509050610a43565b81610a3b81612bec565b9250506109f8565b949350505050565b600080610a4383610950565b6005546060906000906001600160401b03811115610a7757610a776128bd565b604051908082528060200260200182016040528015610aa0578160200160208202803683370190505b50915060005b600554811015610b3457600060058281548110610ac557610ac5612bc0565b600091825260208083209091015480835260039091526040909120549091506001600160a01b03808716911603610b2157808484610b0281612bec565b955081518110610b1457610b14612bc0565b6020026020010181815250505b5080610b2c81612bec565b915050610aa6565b5050919050565b600080600080610b49611c26565b945094509450949050565b600080610b5f61125d565b905060005b8151811015610c5c576000828281518110610b8157610b81612bc0565b602090810291909101810151600081815260029092526040918290205460015492516321f8a72160e01b8152600481018390529193506001600160a01b039081169216906321f8a72190602401602060405180830381865afa158015610beb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0f9190612c18565b6001600160a01b0316141580610c3a57506000818152600260205260409020546001600160a01b0316155b15610c49576000935050505090565b5080610c5481612bec565b915050610b64565b50600191505090565b610c6d611ff0565b6000818152600360205260409020546001600160a01b031680610cd15760405162461bcd60e51b815260206004820152601c60248201527b4e6f2061676772656761746f722065786973747320666f72206b657960201b604482015260640161063c565b600082815260036020908152604080832080546001600160a01b031916905560049091528120805460ff19169055610d0a836005612022565b90508015610d4c577fec70e890fc7db7de4059b114c9093a1f41283d18ffcfbcac45566feea4d4f7778383604051610d43929190612c35565b60405180910390a15b505050565b60006105bb8261073d611ac2565b610d67611ff0565b60008190506000816001600160a01b031663668a0f026040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd09190612c4c565b1015610e1c5760405162461bcd60e51b815260206004820152601b60248201527a11da5d995b881059d9dc9959d85d1bdc881a5cc81a5b9d985b1a59602a1b604482015260640161063c565b6000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e809190612c65565b9050601b8160ff161115610ef15760405162461bcd60e51b815260206004820152603260248201527f41676772656761746f7220646563696d616c732073686f756c64206265206c6f604482015271776572206f7220657175616c20746f20323760701b606482015260840161063c565b6000848152600360205260409020546001600160a01b0316610f4357600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0018490555b600084815260036020908152604080832080546001600160a01b0319166001600160a01b038716179055600490915290819020805460ff191660ff8416179055517f0bcae573430f69c5361e5d76534d3f61d2d803958778680cd74be9dc6299bc6390610fb39086908590612c35565b60405180910390a150505050565b6000806000610fcf84611932565b80516020909101516001600160d81b039091169564ffffffffff909116945092505050565b60006109ee611ac2565b6005818154811061100e57600080fd5b600091825260209091200154905081565b600061102c8484846120e9565b509095945050505050565b60008060006110468886611ec2565b50915085880361105a575085915080611084565b6110648685611ec2565b5090508015611084576110818161107b8985612134565b9061214c565b92505b955095509592505050565b611097611ff0565b6110a16000612164565b565b60006110ad61125d565b905060005b815181101561121f5760008282815181106110cf576110cf612bc0565b602002602001015190506000600160009054906101000a90046001600160a01b03166001600160a01b031663dacb2d01838460405160200161113991907802932b9b7b63b32b91036b4b9b9b4b733903a30b933b2ba1d1603d1b8152601981019190915260390190565b6040516020818303038152906040526040518363ffffffff1660e01b8152600401611165929190612cd8565b602060405180830381865afa158015611182573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a69190612c18565b6000838152600260205260409081902080546001600160a01b0319166001600160a01b038416179055519091507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68906112029084908490612c35565b60405180910390a15050808061121790612bec565b9150506110b2565b5050565b60006105bb826121b4565b600080600061123e8686866120e9565b9250925092505b93509350939050565b6000611258611c26565b919050565b6060600061126961224c565b60408051600180825281830190925291925060009190602080830190803683370190505090506d21b4b931bab4ba213932b0b5b2b960911b816000815181106112b4576112b4612bc0565b6020026020010181815250506112ca82826122a3565b9250505090565b6000546001600160a01b031690565b60006112eb82611932565b516001600160d81b031692915050565b60606000826001600160401b03811115611317576113176128bd565b604051908082528060200260200182016040528015611340578160200160208202803683370190505b50905060005b838110156108085761136f85858381811061136357611363612bc0565b905060200201356112e0565b82828151811061138157611381612bc0565b60209081029190910101528061139681612bec565b915050611346565b60606000826001600160401b038111156113ba576113ba6128bd565b6040519080825280602002602001820160405280156113e3578160200160208202803683370190505b50915060006113f0611864565b90506000611430868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611c8892505050565b905060005b8581101561151a5760006114548888848181106108a6576108a6612bc0565b905080600001516001600160d81b031686838151811061147657611476612bc0565b602002602001018181525050841580156114af5750631cd554d160e21b8888848181106114a5576114a5612bc0565b9050602002013514155b15611507578282815181106114c6576114c6612bc0565b6020026020010151806114e957506114e984826020015164ffffffffff16611aad565b80611504575061150488888481811061090457610904612bc0565b94505b508061151281612bec565b915050611435565b5050509250929050565b60006105bb82611c6c565b60008184146115995760405162461bcd60e51b815260206004820152603060248201527f726f756e64496473206d757374206265207468652073616d65206c656e67746860448201526f2061732063757272656e63794b65797360801b606482015260840161063c565b60006115a3611864565b905060006115e3878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611c8892505050565b905060005b868110156116d257631cd554d160e21b88888381811061160a5761160a612bc0565b9050602002013503156116c0576000806116548a8a8581811061162f5761162f612bc0565b9050602002013589898681811061164857611648612bc0565b90506020020135611ec2565b9150915083838151811061166a5761166a612bc0565b60200260200101518061168257506116828582611aad565b806116aa57506116aa8a8a8581811061169d5761169d612bc0565b9050602002013583611e37565b156116bd57600195505050505050610a43565b50505b806116ca81612bec565b9150506115e8565b506000979650505050505050565b606080836001600160401b038111156116fb576116fb6128bd565b604051908082528060200260200182016040528015611724578160200160208202803683370190505b509150836001600160401b0381111561173f5761173f6128bd565b604051908082528060200260200182016040528015611768578160200160208202803683370190505b509050600083116117815761177c856121b4565b611783565b825b925060005b848110156118035761179a8685611ec2565b8483815181106117ac576117ac612bc0565b602002602001018484815181106117c5576117c5612bc0565b6020026020010182815250828152505050836000036117e45750611805565b836117ee81612cf1565b945050806117fb81612bec565b915050611788565b505b935093915050565b611815611ff0565b6001600160a01b03811661183f576000604051631e4fbdf760e01b815260040161063c91906126f7565b61184881612164565b50565b6000806118588484611ec2565b915091505b9250929050565b600061186e6123b4565b6040516323257c2b60e01b81526d53797374656d53657474696e677360901b60048201526e1c985d1954dd185b1954195c9a5bd9608a1b60248201526001600160a01b0391909116906323257c2b90604401602060405180830381865afa1580156118dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ee9190612c4c565b6000631cd554d160e21b8303611919575060006105bb565b61192b8261192685611c6c565b611aad565b9392505050565b6040805180820190915260008082526020820152631cd554d160e21b82036119805760405180604001604052806119676123d1565b6001600160d81b03168152600060209091015292915050565b6000828152600360205260409020546001600160a01b03168015611a8b5760408051600481526024810182526020810180516001600160e01b0316633fabe5a360e21b179052905160009081906001600160a01b038516906119e3908590612d08565b600060405180830381855afa9150503d8060008114611a1e576040519150601f19603f3d011682016040523d82523d6000602084013e611a23565b606091505b50915091508115611a875760008082806020019051810190611a459190612d3b565b509350509250506040518060400160405280611a618a856123df565b6001600160d81b031681526020018264ffffffffff168152509650505050505050919050565b5050505b50919050565b60006109ee6d21b4b931bab4ba213932b0b5b2b960911b6124bf565b600042611aba8385612534565b109392505050565b6000611acc6123b4565b604051634f72caad60e11b81526d53797374656d53657474696e677360901b60048201527561676772656761746f725761726e696e67466c61677360501b60248201526001600160a01b039190911690639ee5955a90604401602060405180830381865afa158015611b42573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ee9190612c18565b6000631cd554d160e21b8303611b7e575060006105bb565b6000838152600360205260409020546001600160a01b0316801580611baa57506001600160a01b038316155b15611bb95760009150506105bb565b604051631abf23ff60e11b81526001600160a01b0384169063357e47fe90611be59084906004016126f7565b602060405180830381865afa158015611c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a439190612ba5565b60405162461bcd60e51b815260206004820152601b60248201527a21b0b73737ba10313290393ab71037b7103a3434b9903630bcb2b960291b604482015260640161063c565b6000611c7782611932565b6020015164ffffffffff1692915050565b60606000611c94611ac2565b90506001600160a01b03811615611dee57600083516001600160401b03811115611cc057611cc06128bd565b604051908082528060200260200182016040528015611ce9578160200160208202803683370190505b50905060005b8451811015611d745760036000868381518110611d0e57611d0e612bc0565b6020026020010151815260200190815260200160002060009054906101000a90046001600160a01b0316828281518110611d4a57611d4a612bc0565b6001600160a01b039092166020928302919091019091015280611d6c81612bec565b915050611cef565b50604051631f5c8f2b60e21b81526001600160a01b03831690637d723cac90611da1908490600401612d8b565b600060405180830381865afa158015611dbe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611de69190810190612dcc565b925050611a8b565b82516001600160401b03811115611e0757611e076128bd565b60405190808252806020026020018201604052801561080857816020016020820280368337019050509392505050565b6000611e41611a91565b600084815260036020526040908190205490516318b844ad60e01b81526001600160a01b039182166004820152602481018590529116906318b844ad90604401602060405180830381865afa158015611e9e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192b9190612ba5565b600080631cd554d160e21b8403611ee657611edb6123d1565b60009150915061185d565b6000848152600360205260409020546001600160a01b03168015611fe857600084604051602401611f1991815260200190565b60408051601f198184030181529181526020820180516001600160e01b0316639a6fc8f560e01b1790525190915060009081906001600160a01b03851690611f62908590612d08565b600060405180830381855afa9150503d8060008114611f9d576040519150601f19603f3d011682016040523d82523d6000602084013e611fa2565b606091505b50915091508115611fe45760008082806020019051810190611fc49190612d3b565b50935050925050611fd58a836123df565b9750955061185d945050505050565b5050505b509250929050565b33611ff96112d1565b6001600160a01b0316146110a1573360405163118cdaa760e01b815260040161063c91906126f7565b6000805b82548110156120df578383828154811061204257612042612bc0565b9060005260206000200154036120cd578254839061206290600190612e78565b8154811061207257612072612bc0565b906000526020600020015483828154811061208f5761208f612bc0565b9060005260206000200181905550828054806120ad576120ad612e8b565b6001900381819060005260206000200160009055905560019150506105bb565b806120d781612bec565b915050612026565b5060009392505050565b60008060006120f7866112e0565b915083860361210a575083915080611245565b612113846112e0565b90508015611245576121298161107b8785612134565b925093509350939050565b600061192b83836121476012600a612f7d565b612591565b600061192b838361215f6012600a612f7d565b6125e9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000631cd554d160e21b82036121cc57506000919050565b6000828152600360205260409020546001600160a01b03168015611a8b57806001600160a01b031663668a0f026040518163ffffffff1660e01b8152600401602060405180830381865afa158015612228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192b9190612c4c565b604080516001808252818301909252606091602080830190803683370190505090506e466c657869626c6553746f7261676560881b8160008151811061229457612294612bc0565b60200260200101818152505090565b6060815183516122b39190612c05565b6001600160401b038111156122ca576122ca6128bd565b6040519080825280602002602001820160405280156122f3578160200160208202803683370190505b50905060005b835181101561234b5783818151811061231457612314612bc0565b602002602001015182828151811061232e5761232e612bc0565b60209081029190910101528061234381612bec565b9150506122f9565b5060005b82518110156123ad5782818151811061236a5761236a612bc0565b6020026020010151828286516123809190612c05565b8151811061239057612390612bc0565b6020908102919091010152806123a581612bec565b91505061234f565b5092915050565b60006109ee6e466c657869626c6553746f7261676560881b6124bf565b60006109ee6012600a612f7d565b60008082121561242f5760405162461bcd60e51b815260206004820152601b60248201527a139959d85d1a5d99481c985d19481b9bdd081cdd5c1c1bdc9d1959602a1b604482015260640161063c565b60008381526004602052604090205460ff168281158061244f5750816012145b610a43576012821015612488576000612469836012612e78565b61247490600a612f7d565b90506124808282612602565b915050610a43565b6012821115610a4357600061249e601284612e78565b6124a990600a612f7d565b90506124b58282612684565b9695505050505050565b600081815260026020908152604080832054905170026b4b9b9b4b7339030b2323932b9b99d1607d1b92810192909252603182018490526001600160a01b03169081151590605101604051602081830303815290604052906123ad5760405162461bcd60e51b815260040161063c9190612f89565b6000806125418385612c05565b90508381101561192b5760405162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015260640161063c565b60008061259f600a84612fb2565b6125a98587612fc6565b6125b39190612fb2565b905060056125c2600a83612fdd565b106125d5576125d2600a82612c05565b90505b6125e0600a82612fb2565b95945050505050565b600080836125f884600a612fc6565b6125a99087612fc6565b600082600003612614575060006105bb565b60006126208385612fc6565b90508261262d8583612fb2565b1461192b5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b606482015260840161063c565b60008082116126d25760405162461bcd60e51b815260206004820152601a602482015279536166654d6174683a206469766973696f6e206279207a65726f60301b604482015260640161063c565b6000610a438385612fb2565b6000602082840312156126f057600080fd5b5035919050565b6001600160a01b0391909116815260200190565b60008060006060848603121561272057600080fd5b505081359360208301359350604090920135919050565b60008083601f84011261274957600080fd5b5081356001600160401b0381111561276057600080fd5b6020830191508360208260051b850101111561185d57600080fd5b6000806020838503121561278e57600080fd5b82356001600160401b038111156127a457600080fd5b6127b085828601612737565b90969095509350505050565b600081518084526020808501945080840160005b838110156127ec578151875295820195908201906001016127d0565b509495945050505050565b60208152600061192b60208301846127bc565b6000806000806080858703121561282057600080fd5b5050823594602084013594506040840135936060013592509050565b6001600160a01b038116811461184857600080fd5b80356112588161283c565b60006020828403121561286e57600080fd5b813561192b8161283c565b6020808252825182820181905260009190848201906040850190845b818110156128b157835183529284019291840191600101612895565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b6040516101a081016001600160401b03811182821017156128f6576128f66128bd565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612924576129246128bd565b604052919050565b60006101a0828403121561293f57600080fd5b6129476128d3565b90508135815261295960208301612851565b602082015261296a60408301612851565b6040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525061014080830135818301525061016080830135818301525061018080830135818301525092915050565b60008060008061050085870312156129fa57600080fd5b612a04868661292c565b93506101a08501359250612a1c866101c0870161292c565b9150612a2c86610360870161292c565b905092959194509250565b60008060408385031215612a4a57600080fd5b823591506020830135612a5c8161283c565b809150509250929050565b600080600080600060a08688031215612a7f57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b604081526000612ab560408301856127bc565b905082151560208301529392505050565b60008060008060408587031215612adc57600080fd5b84356001600160401b0380821115612af357600080fd5b612aff88838901612737565b90965094506020870135915080821115612b1857600080fd5b50612b2587828801612737565b95989497509550505050565b604081526000612b4460408301856127bc565b82810360208401526125e081856127bc565b60006101a08284031215612b6957600080fd5b61192b838361292c565b60008060408385031215612b8657600080fd5b50508035926020909101359150565b8051801515811461125857600080fd5b600060208284031215612bb757600080fd5b61192b82612b95565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612bfe57612bfe612bd6565b5060010190565b808201808211156105bb576105bb612bd6565b600060208284031215612c2a57600080fd5b815161192b8161283c565b9182526001600160a01b0316602082015260400190565b600060208284031215612c5e57600080fd5b5051919050565b600060208284031215612c7757600080fd5b815160ff8116811461192b57600080fd5b60005b83811015612ca3578181015183820152602001612c8b565b50506000910152565b60008151808452612cc4816020860160208601612c88565b601f01601f19169290920160200192915050565b828152604060208201526000610a436040830184612cac565b600081612d0057612d00612bd6565b506000190190565b60008251612d1a818460208701612c88565b9190910192915050565b80516001600160501b038116811461125857600080fd5b600080600080600060a08688031215612d5357600080fd5b612d5c86612d24565b9450602086015193506040860151925060608601519150612d7f60808701612d24565b90509295509295909350565b6020808252825182820181905260009190848201906040850190845b818110156128b15783516001600160a01b031683529284019291840191600101612da7565b60006020808385031215612ddf57600080fd5b82516001600160401b0380821115612df657600080fd5b818501915085601f830112612e0a57600080fd5b815181811115612e1c57612e1c6128bd565b8060051b9150612e2d8483016128fc565b8181529183018401918481019088841115612e4757600080fd5b938501935b83851015612e6c57612e5d85612b95565b82529385019390850190612e4c565b98975050505050505050565b818103818111156105bb576105bb612bd6565b634e487b7160e01b600052603160045260246000fd5b600181815b80851115611fe8578160001904821115612ec257612ec2612bd6565b80851615612ecf57918102915b93841c9390800290612ea6565b600082612eeb575060016105bb565b81612ef8575060006105bb565b8160018114612f0e5760028114612f1857612f34565b60019150506105bb565b60ff841115612f2957612f29612bd6565b50506001821b6105bb565b5060208310610133831016604e8410600b8410161715612f57575081810a6105bb565b612f618383612ea1565b8060001904821115612f7557612f75612bd6565b029392505050565b600061192b8383612edc565b60208152600061192b6020830184612cac565b634e487b7160e01b600052601260045260246000fd5b600082612fc157612fc1612f9c565b500490565b80820281158282048414176105bb576105bb612bd6565b600082612fec57612fec612f9c565b50069056fea164736f6c6343000815000a","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106101d75760003560e01c80629919c0146101dc578063045056f81461020457806304f3bcec14610234578063055286e01461025457806305a046e5146102875780630a7d36d1146102a75780630c71cd23146102ba5780630ee4951b146102e2578063109e46a2146102f85780632528f0fe1461030b5780632678df961461031e57806326bd30fa1461033e5780632af64bd3146103515780632bed9e0c1461035957806338aa1b991461036e5780633f0e084f146103815780634308a94f146103945780634c36b837146103bc5780634f72def6146103c4578063614d08f8146103d7578063654a60ac146103ee5780636ce66c80146104015780637103353e1461042f578063715018a61461045857806374185360146104605780637a018a1e146104685780638295016a1461047b5780638661cc7b1461048e578063899ffef4146104a15780638da5cb5b146104a9578063ac82f608146104b1578063b295ad34146104c4578063c2c8a676146104f9578063c8e5bbd51461050c578063ce8480ea1461052d578063d89ee86114610540578063ed76245014610553578063f2fde38b14610574578063fce132f914610587578063fdadbc7e14610595575b600080fd5b6101ef6101ea3660046126de565b6105a8565b60405190151581526020015b60405180910390f35b6102176102123660046126de565b6105c1565b6040805193845291151560208401521515908201526060016101fb565b600154610247906001600160a01b031681565b6040516101fb91906126f7565b61026761026236600461270b565b61074e565b6040805194855260208501939093529183015260608201526080016101fb565b61029a61029536600461277b565b610765565b6040516101fb91906127f7565b6101ef6102b536600461277b565b610810565b6102cd6102c83660046126de565b610950565b604080519283529015156020830152016101fb565b6102ea6109e4565b6040519081526020016101fb565b6102ea61030636600461280a565b6109f3565b6101ef6103193660046126de565b610a4b565b61033161032c36600461285c565b610a57565b6040516101fb9190612879565b61026761034c3660046129e3565b610b3b565b6101ef610b54565b61036c6103673660046126de565b610c65565b005b6101ef61037c3660046126de565b610d51565b61036c61038f366004612a37565b610d5f565b6103a76103a23660046126de565b610fc1565b604080519283526020830191909152016101fb565b610247610ff4565b6102ea6103d23660046126de565b610ffe565b6102ea6c45786368616e6765526174657360981b81565b6102ea6103fc36600461270b565b61101f565b61041461040f366004612a67565b611037565b604080519384526020840192909252908201526060016101fb565b61024761043d3660046126de565b6003602052600090815260409020546001600160a01b031681565b61036c61108f565b61036c6110a3565b6102ea6104763660046126de565b611223565b61041461048936600461270b565b61122e565b6101ef61049c3660046126de565b61124e565b61033161125d565b6102476112d1565b6102ea6104bf3660046126de565b6112e0565b6104e76104d23660046126de565b60046020526000908152604090205460ff1681565b60405160ff90911681526020016101fb565b61029a61050736600461277b565b6112fb565b61051f61051a36600461277b565b61139e565b6040516101fb929190612aa2565b6102ea61053b3660046126de565b611524565b6101ef61054e366004612ac6565b61152f565b61056661056136600461270b565b6116e0565b6040516101fb929190612b31565b61036c61058236600461285c565b61180d565b6101ef61049c366004612b56565b6103a76105a3366004612b73565b61184b565b60006105bb826105b6611864565b611901565b92915050565b600081815260036020526040812054819081906001600160a01b0316631cd554d160e21b8514806105fa57506001600160a01b03811615155b6106455760405162461bcd60e51b8152602060048201526017602482015276139bc81859d9dc9959d85d1bdc88199bdc88185cdcd95d604a1b60448201526064015b60405180910390fd5b600061065086611932565b9050631cd554d160e21b860361067a57516001600160d81b03169350600092508291506107479050565b80516001600160d81b0316945061068f611a91565b815160405163413caeb560e01b81526001600160a01b0385811660048301526001600160d81b03909216602482015291169063413caeb5906044016020604051808303816000875af11580156106e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070d9190612ba5565b935061072b61071a611864565b826020015164ffffffffff16611aad565b8061074257506107428661073d611ac2565b611b66565b925050505b9193909250565b60008060008061075c611c26565b93509350935093565b60606000826001600160401b03811115610781576107816128bd565b6040519080825280602002602001820160405280156107aa578160200160208202803683370190505b50905060005b83811015610808576107d98585838181106107cd576107cd612bc0565b90506020020135611c6c565b8282815181106107eb576107eb612bc0565b60209081029190910101528061080081612bec565b9150506107b0565b509392505050565b60008061081b611864565b9050600061085b858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611c8892505050565b905060005b8481101561094457631cd554d160e21b86868381811061088257610882612bc0565b9050602002013503156109325760006108b28787848181106108a6576108a6612bc0565b90506020020135611932565b90508282815181106108c6576108c6612bc0565b6020026020010151806108e957506108e984826020015164ffffffffff16611aad565b8061091e575061091e87878481811061090457610904612bc0565b9050602002013582600001516001600160d81b0316611e37565b156109305760019450505050506105bb565b505b8061093c81612bec565b915050610860565b50600095945050505050565b600080600061095e84611932565b9050631cd554d160e21b840361098257516001600160d81b03169360009350915050565b80516109a061098f611864565b836020015164ffffffffff16611aad565b806109b257506109b28561073d611ac2565b806109cf57506109cf8583600001516001600160d81b0316611e37565b6001600160d81b039091169590945092505050565b60006109ee611864565b905090565b600083815b610a0c87610a07846001612c05565b611ec2565b915050801580610a245750610a218486612c05565b81115b15610a3157509050610a43565b81610a3b81612bec565b9250506109f8565b949350505050565b600080610a4383610950565b6005546060906000906001600160401b03811115610a7757610a776128bd565b604051908082528060200260200182016040528015610aa0578160200160208202803683370190505b50915060005b600554811015610b3457600060058281548110610ac557610ac5612bc0565b600091825260208083209091015480835260039091526040909120549091506001600160a01b03808716911603610b2157808484610b0281612bec565b955081518110610b1457610b14612bc0565b6020026020010181815250505b5080610b2c81612bec565b915050610aa6565b5050919050565b600080600080610b49611c26565b945094509450949050565b600080610b5f61125d565b905060005b8151811015610c5c576000828281518110610b8157610b81612bc0565b602090810291909101810151600081815260029092526040918290205460015492516321f8a72160e01b8152600481018390529193506001600160a01b039081169216906321f8a72190602401602060405180830381865afa158015610beb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0f9190612c18565b6001600160a01b0316141580610c3a57506000818152600260205260409020546001600160a01b0316155b15610c49576000935050505090565b5080610c5481612bec565b915050610b64565b50600191505090565b610c6d611ff0565b6000818152600360205260409020546001600160a01b031680610cd15760405162461bcd60e51b815260206004820152601c60248201527b4e6f2061676772656761746f722065786973747320666f72206b657960201b604482015260640161063c565b600082815260036020908152604080832080546001600160a01b031916905560049091528120805460ff19169055610d0a836005612022565b90508015610d4c577fec70e890fc7db7de4059b114c9093a1f41283d18ffcfbcac45566feea4d4f7778383604051610d43929190612c35565b60405180910390a15b505050565b60006105bb8261073d611ac2565b610d67611ff0565b60008190506000816001600160a01b031663668a0f026040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd09190612c4c565b1015610e1c5760405162461bcd60e51b815260206004820152601b60248201527a11da5d995b881059d9dc9959d85d1bdc881a5cc81a5b9d985b1a59602a1b604482015260640161063c565b6000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e809190612c65565b9050601b8160ff161115610ef15760405162461bcd60e51b815260206004820152603260248201527f41676772656761746f7220646563696d616c732073686f756c64206265206c6f604482015271776572206f7220657175616c20746f20323760701b606482015260840161063c565b6000848152600360205260409020546001600160a01b0316610f4357600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0018490555b600084815260036020908152604080832080546001600160a01b0319166001600160a01b038716179055600490915290819020805460ff191660ff8416179055517f0bcae573430f69c5361e5d76534d3f61d2d803958778680cd74be9dc6299bc6390610fb39086908590612c35565b60405180910390a150505050565b6000806000610fcf84611932565b80516020909101516001600160d81b039091169564ffffffffff909116945092505050565b60006109ee611ac2565b6005818154811061100e57600080fd5b600091825260209091200154905081565b600061102c8484846120e9565b509095945050505050565b60008060006110468886611ec2565b50915085880361105a575085915080611084565b6110648685611ec2565b5090508015611084576110818161107b8985612134565b9061214c565b92505b955095509592505050565b611097611ff0565b6110a16000612164565b565b60006110ad61125d565b905060005b815181101561121f5760008282815181106110cf576110cf612bc0565b602002602001015190506000600160009054906101000a90046001600160a01b03166001600160a01b031663dacb2d01838460405160200161113991907802932b9b7b63b32b91036b4b9b9b4b733903a30b933b2ba1d1603d1b8152601981019190915260390190565b6040516020818303038152906040526040518363ffffffff1660e01b8152600401611165929190612cd8565b602060405180830381865afa158015611182573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a69190612c18565b6000838152600260205260409081902080546001600160a01b0319166001600160a01b038416179055519091507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68906112029084908490612c35565b60405180910390a15050808061121790612bec565b9150506110b2565b5050565b60006105bb826121b4565b600080600061123e8686866120e9565b9250925092505b93509350939050565b6000611258611c26565b919050565b6060600061126961224c565b60408051600180825281830190925291925060009190602080830190803683370190505090506d21b4b931bab4ba213932b0b5b2b960911b816000815181106112b4576112b4612bc0565b6020026020010181815250506112ca82826122a3565b9250505090565b6000546001600160a01b031690565b60006112eb82611932565b516001600160d81b031692915050565b60606000826001600160401b03811115611317576113176128bd565b604051908082528060200260200182016040528015611340578160200160208202803683370190505b50905060005b838110156108085761136f85858381811061136357611363612bc0565b905060200201356112e0565b82828151811061138157611381612bc0565b60209081029190910101528061139681612bec565b915050611346565b60606000826001600160401b038111156113ba576113ba6128bd565b6040519080825280602002602001820160405280156113e3578160200160208202803683370190505b50915060006113f0611864565b90506000611430868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611c8892505050565b905060005b8581101561151a5760006114548888848181106108a6576108a6612bc0565b905080600001516001600160d81b031686838151811061147657611476612bc0565b602002602001018181525050841580156114af5750631cd554d160e21b8888848181106114a5576114a5612bc0565b9050602002013514155b15611507578282815181106114c6576114c6612bc0565b6020026020010151806114e957506114e984826020015164ffffffffff16611aad565b80611504575061150488888481811061090457610904612bc0565b94505b508061151281612bec565b915050611435565b5050509250929050565b60006105bb82611c6c565b60008184146115995760405162461bcd60e51b815260206004820152603060248201527f726f756e64496473206d757374206265207468652073616d65206c656e67746860448201526f2061732063757272656e63794b65797360801b606482015260840161063c565b60006115a3611864565b905060006115e3878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611c8892505050565b905060005b868110156116d257631cd554d160e21b88888381811061160a5761160a612bc0565b9050602002013503156116c0576000806116548a8a8581811061162f5761162f612bc0565b9050602002013589898681811061164857611648612bc0565b90506020020135611ec2565b9150915083838151811061166a5761166a612bc0565b60200260200101518061168257506116828582611aad565b806116aa57506116aa8a8a8581811061169d5761169d612bc0565b9050602002013583611e37565b156116bd57600195505050505050610a43565b50505b806116ca81612bec565b9150506115e8565b506000979650505050505050565b606080836001600160401b038111156116fb576116fb6128bd565b604051908082528060200260200182016040528015611724578160200160208202803683370190505b509150836001600160401b0381111561173f5761173f6128bd565b604051908082528060200260200182016040528015611768578160200160208202803683370190505b509050600083116117815761177c856121b4565b611783565b825b925060005b848110156118035761179a8685611ec2565b8483815181106117ac576117ac612bc0565b602002602001018484815181106117c5576117c5612bc0565b6020026020010182815250828152505050836000036117e45750611805565b836117ee81612cf1565b945050806117fb81612bec565b915050611788565b505b935093915050565b611815611ff0565b6001600160a01b03811661183f576000604051631e4fbdf760e01b815260040161063c91906126f7565b61184881612164565b50565b6000806118588484611ec2565b915091505b9250929050565b600061186e6123b4565b6040516323257c2b60e01b81526d53797374656d53657474696e677360901b60048201526e1c985d1954dd185b1954195c9a5bd9608a1b60248201526001600160a01b0391909116906323257c2b90604401602060405180830381865afa1580156118dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ee9190612c4c565b6000631cd554d160e21b8303611919575060006105bb565b61192b8261192685611c6c565b611aad565b9392505050565b6040805180820190915260008082526020820152631cd554d160e21b82036119805760405180604001604052806119676123d1565b6001600160d81b03168152600060209091015292915050565b6000828152600360205260409020546001600160a01b03168015611a8b5760408051600481526024810182526020810180516001600160e01b0316633fabe5a360e21b179052905160009081906001600160a01b038516906119e3908590612d08565b600060405180830381855afa9150503d8060008114611a1e576040519150601f19603f3d011682016040523d82523d6000602084013e611a23565b606091505b50915091508115611a875760008082806020019051810190611a459190612d3b565b509350509250506040518060400160405280611a618a856123df565b6001600160d81b031681526020018264ffffffffff168152509650505050505050919050565b5050505b50919050565b60006109ee6d21b4b931bab4ba213932b0b5b2b960911b6124bf565b600042611aba8385612534565b109392505050565b6000611acc6123b4565b604051634f72caad60e11b81526d53797374656d53657474696e677360901b60048201527561676772656761746f725761726e696e67466c61677360501b60248201526001600160a01b039190911690639ee5955a90604401602060405180830381865afa158015611b42573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ee9190612c18565b6000631cd554d160e21b8303611b7e575060006105bb565b6000838152600360205260409020546001600160a01b0316801580611baa57506001600160a01b038316155b15611bb95760009150506105bb565b604051631abf23ff60e11b81526001600160a01b0384169063357e47fe90611be59084906004016126f7565b602060405180830381865afa158015611c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a439190612ba5565b60405162461bcd60e51b815260206004820152601b60248201527a21b0b73737ba10313290393ab71037b7103a3434b9903630bcb2b960291b604482015260640161063c565b6000611c7782611932565b6020015164ffffffffff1692915050565b60606000611c94611ac2565b90506001600160a01b03811615611dee57600083516001600160401b03811115611cc057611cc06128bd565b604051908082528060200260200182016040528015611ce9578160200160208202803683370190505b50905060005b8451811015611d745760036000868381518110611d0e57611d0e612bc0565b6020026020010151815260200190815260200160002060009054906101000a90046001600160a01b0316828281518110611d4a57611d4a612bc0565b6001600160a01b039092166020928302919091019091015280611d6c81612bec565b915050611cef565b50604051631f5c8f2b60e21b81526001600160a01b03831690637d723cac90611da1908490600401612d8b565b600060405180830381865afa158015611dbe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611de69190810190612dcc565b925050611a8b565b82516001600160401b03811115611e0757611e076128bd565b60405190808252806020026020018201604052801561080857816020016020820280368337019050509392505050565b6000611e41611a91565b600084815260036020526040908190205490516318b844ad60e01b81526001600160a01b039182166004820152602481018590529116906318b844ad90604401602060405180830381865afa158015611e9e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192b9190612ba5565b600080631cd554d160e21b8403611ee657611edb6123d1565b60009150915061185d565b6000848152600360205260409020546001600160a01b03168015611fe857600084604051602401611f1991815260200190565b60408051601f198184030181529181526020820180516001600160e01b0316639a6fc8f560e01b1790525190915060009081906001600160a01b03851690611f62908590612d08565b600060405180830381855afa9150503d8060008114611f9d576040519150601f19603f3d011682016040523d82523d6000602084013e611fa2565b606091505b50915091508115611fe45760008082806020019051810190611fc49190612d3b565b50935050925050611fd58a836123df565b9750955061185d945050505050565b5050505b509250929050565b33611ff96112d1565b6001600160a01b0316146110a1573360405163118cdaa760e01b815260040161063c91906126f7565b6000805b82548110156120df578383828154811061204257612042612bc0565b9060005260206000200154036120cd578254839061206290600190612e78565b8154811061207257612072612bc0565b906000526020600020015483828154811061208f5761208f612bc0565b9060005260206000200181905550828054806120ad576120ad612e8b565b6001900381819060005260206000200160009055905560019150506105bb565b806120d781612bec565b915050612026565b5060009392505050565b60008060006120f7866112e0565b915083860361210a575083915080611245565b612113846112e0565b90508015611245576121298161107b8785612134565b925093509350939050565b600061192b83836121476012600a612f7d565b612591565b600061192b838361215f6012600a612f7d565b6125e9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000631cd554d160e21b82036121cc57506000919050565b6000828152600360205260409020546001600160a01b03168015611a8b57806001600160a01b031663668a0f026040518163ffffffff1660e01b8152600401602060405180830381865afa158015612228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192b9190612c4c565b604080516001808252818301909252606091602080830190803683370190505090506e466c657869626c6553746f7261676560881b8160008151811061229457612294612bc0565b60200260200101818152505090565b6060815183516122b39190612c05565b6001600160401b038111156122ca576122ca6128bd565b6040519080825280602002602001820160405280156122f3578160200160208202803683370190505b50905060005b835181101561234b5783818151811061231457612314612bc0565b602002602001015182828151811061232e5761232e612bc0565b60209081029190910101528061234381612bec565b9150506122f9565b5060005b82518110156123ad5782818151811061236a5761236a612bc0565b6020026020010151828286516123809190612c05565b8151811061239057612390612bc0565b6020908102919091010152806123a581612bec565b91505061234f565b5092915050565b60006109ee6e466c657869626c6553746f7261676560881b6124bf565b60006109ee6012600a612f7d565b60008082121561242f5760405162461bcd60e51b815260206004820152601b60248201527a139959d85d1a5d99481c985d19481b9bdd081cdd5c1c1bdc9d1959602a1b604482015260640161063c565b60008381526004602052604090205460ff168281158061244f5750816012145b610a43576012821015612488576000612469836012612e78565b61247490600a612f7d565b90506124808282612602565b915050610a43565b6012821115610a4357600061249e601284612e78565b6124a990600a612f7d565b90506124b58282612684565b9695505050505050565b600081815260026020908152604080832054905170026b4b9b9b4b7339030b2323932b9b99d1607d1b92810192909252603182018490526001600160a01b03169081151590605101604051602081830303815290604052906123ad5760405162461bcd60e51b815260040161063c9190612f89565b6000806125418385612c05565b90508381101561192b5760405162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015260640161063c565b60008061259f600a84612fb2565b6125a98587612fc6565b6125b39190612fb2565b905060056125c2600a83612fdd565b106125d5576125d2600a82612c05565b90505b6125e0600a82612fb2565b95945050505050565b600080836125f884600a612fc6565b6125a99087612fc6565b600082600003612614575060006105bb565b60006126208385612fc6565b90508261262d8583612fb2565b1461192b5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b606482015260840161063c565b60008082116126d25760405162461bcd60e51b815260206004820152601a602482015279536166654d6174683a206469766973696f6e206279207a65726f60301b604482015260640161063c565b6000610a438385612fb2565b6000602082840312156126f057600080fd5b5035919050565b6001600160a01b0391909116815260200190565b60008060006060848603121561272057600080fd5b505081359360208301359350604090920135919050565b60008083601f84011261274957600080fd5b5081356001600160401b0381111561276057600080fd5b6020830191508360208260051b850101111561185d57600080fd5b6000806020838503121561278e57600080fd5b82356001600160401b038111156127a457600080fd5b6127b085828601612737565b90969095509350505050565b600081518084526020808501945080840160005b838110156127ec578151875295820195908201906001016127d0565b509495945050505050565b60208152600061192b60208301846127bc565b6000806000806080858703121561282057600080fd5b5050823594602084013594506040840135936060013592509050565b6001600160a01b038116811461184857600080fd5b80356112588161283c565b60006020828403121561286e57600080fd5b813561192b8161283c565b6020808252825182820181905260009190848201906040850190845b818110156128b157835183529284019291840191600101612895565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b6040516101a081016001600160401b03811182821017156128f6576128f66128bd565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612924576129246128bd565b604052919050565b60006101a0828403121561293f57600080fd5b6129476128d3565b90508135815261295960208301612851565b602082015261296a60408301612851565b6040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525061014080830135818301525061016080830135818301525061018080830135818301525092915050565b60008060008061050085870312156129fa57600080fd5b612a04868661292c565b93506101a08501359250612a1c866101c0870161292c565b9150612a2c86610360870161292c565b905092959194509250565b60008060408385031215612a4a57600080fd5b823591506020830135612a5c8161283c565b809150509250929050565b600080600080600060a08688031215612a7f57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b604081526000612ab560408301856127bc565b905082151560208301529392505050565b60008060008060408587031215612adc57600080fd5b84356001600160401b0380821115612af357600080fd5b612aff88838901612737565b90965094506020870135915080821115612b1857600080fd5b50612b2587828801612737565b95989497509550505050565b604081526000612b4460408301856127bc565b82810360208401526125e081856127bc565b60006101a08284031215612b6957600080fd5b61192b838361292c565b60008060408385031215612b8657600080fd5b50508035926020909101359150565b8051801515811461125857600080fd5b600060208284031215612bb757600080fd5b61192b82612b95565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612bfe57612bfe612bd6565b5060010190565b808201808211156105bb576105bb612bd6565b600060208284031215612c2a57600080fd5b815161192b8161283c565b9182526001600160a01b0316602082015260400190565b600060208284031215612c5e57600080fd5b5051919050565b600060208284031215612c7757600080fd5b815160ff8116811461192b57600080fd5b60005b83811015612ca3578181015183820152602001612c8b565b50506000910152565b60008151808452612cc4816020860160208601612c88565b601f01601f19169290920160200192915050565b828152604060208201526000610a436040830184612cac565b600081612d0057612d00612bd6565b506000190190565b60008251612d1a818460208701612c88565b9190910192915050565b80516001600160501b038116811461125857600080fd5b600080600080600060a08688031215612d5357600080fd5b612d5c86612d24565b9450602086015193506040860151925060608601519150612d7f60808701612d24565b90509295509295909350565b6020808252825182820181905260009190848201906040850190845b818110156128b15783516001600160a01b031683529284019291840191600101612da7565b60006020808385031215612ddf57600080fd5b82516001600160401b0380821115612df657600080fd5b818501915085601f830112612e0a57600080fd5b815181811115612e1c57612e1c6128bd565b8060051b9150612e2d8483016128fc565b8181529183018401918481019088841115612e4757600080fd5b938501935b83851015612e6c57612e5d85612b95565b82529385019390850190612e4c565b98975050505050505050565b818103818111156105bb576105bb612bd6565b634e487b7160e01b600052603160045260246000fd5b600181815b80851115611fe8578160001904821115612ec257612ec2612bd6565b80851615612ecf57918102915b93841c9390800290612ea6565b600082612eeb575060016105bb565b81612ef8575060006105bb565b8160018114612f0e5760028114612f1857612f34565b60019150506105bb565b60ff841115612f2957612f29612bd6565b50506001821b6105bb565b5060208310610133831016604e8410600b8410161715612f57575081810a6105bb565b612f618383612ea1565b8060001904821115612f7557612f75612bd6565b029392505050565b600061192b8383612edc565b60208152600061192b6020830184612cac565b634e487b7160e01b600052601260045260246000fd5b600082612fc157612fc1612f9c565b500490565b80820281158282048414176105bb576105bb612bd6565b600082612fec57612fec612f9c565b50069056fea164736f6c6343000815000a","abi":[{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_resolver","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"currencyKey","type":"bytes32"},{"indexed":false,"internalType":"address","name":"aggregator","type":"address"}],"name":"AggregatorAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"currencyKey","type":"bytes32"},{"indexed":false,"internalType":"address","name":"aggregator","type":"address"}],"name":"AggregatorRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"name","type":"bytes32"},{"indexed":false,"internalType":"address","name":"destination","type":"address"}],"name":"CacheUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"CONTRACT_NAME","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currencyKey","type":"bytes32"},{"internalType":"address","name":"aggregatorAddress","type":"address"}],"name":"addAggregator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"aggregatorKeys","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"aggregatorWarningFlags","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"aggregators","outputs":[{"internalType":"contract AggregatorV2V3Interface","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"currencyKeys","type":"bytes32[]"}],"name":"anyRateIsInvalid","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"currencyKeys","type":"bytes32[]"},{"internalType":"uint256[]","name":"roundIds","type":"uint256[]"}],"name":"anyRateIsInvalidAtRound","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"aggregator","type":"address"}],"name":"currenciesUsingAggregator","outputs":[{"internalType":"bytes32[]","name":"currencies","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"currencyKeyDecimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"effectiveAtomicValueAndRates","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"currencyKey","type":"bytes32"},{"internalType":"address","name":"dexPriceAggregator","type":"address"},{"internalType":"address","name":"atomicEquivalentForDexPricing","type":"address"},{"internalType":"uint256","name":"atomicExchangeFeeRate","type":"uint256"},{"internalType":"uint256","name":"atomicTwapWindow","type":"uint256"},{"internalType":"uint256","name":"atomicMaxVolumePerBlock","type":"uint256"},{"internalType":"uint256","name":"atomicVolatilityConsiderationWindow","type":"uint256"},{"internalType":"uint256","name":"atomicVolatilityUpdateThreshold","type":"uint256"},{"internalType":"uint256","name":"exchangeFeeRate","type":"uint256"},{"internalType":"uint256","name":"exchangeMaxDynamicFee","type":"uint256"},{"internalType":"uint256","name":"exchangeDynamicFeeRounds","type":"uint256"},{"internalType":"uint256","name":"exchangeDynamicFeeThreshold","type":"uint256"},{"internalType":"uint256","name":"exchangeDynamicFeeWeightDecay","type":"uint256"}],"internalType":"struct IDirectIntegrationManager.ParameterIntegrationSettings","name":"","type":"tuple"},{"internalType":"uint256","name":"","type":"uint256"},{"components":[{"internalType":"bytes32","name":"currencyKey","type":"bytes32"},{"internalType":"address","name":"dexPriceAggregator","type":"address"},{"internalType":"address","name":"atomicEquivalentForDexPricing","type":"address"},{"internalType":"uint256","name":"atomicExchangeFeeRate","type":"uint256"},{"internalType":"uint256","name":"atomicTwapWindow","type":"uint256"},{"internalType":"uint256","name":"atomicMaxVolumePerBlock","type":"uint256"},{"internalType":"uint256","name":"atomicVolatilityConsiderationWindow","type":"uint256"},{"internalType":"uint256","name":"atomicVolatilityUpdateThreshold","type":"uint256"},{"internalType":"uint256","name":"exchangeFeeRate","type":"uint256"},{"internalType":"uint256","name":"exchangeMaxDynamicFee","type":"uint256"},{"internalType":"uint256","name":"exchangeDynamicFeeRounds","type":"uint256"},{"internalType":"uint256","name":"exchangeDynamicFeeThreshold","type":"uint256"},{"internalType":"uint256","name":"exchangeDynamicFeeWeightDecay","type":"uint256"}],"internalType":"struct IDirectIntegrationManager.ParameterIntegrationSettings","name":"","type":"tuple"},{"components":[{"internalType":"bytes32","name":"currencyKey","type":"bytes32"},{"internalType":"address","name":"dexPriceAggregator","type":"address"},{"internalType":"address","name":"atomicEquivalentForDexPricing","type":"address"},{"internalType":"uint256","name":"atomicExchangeFeeRate","type":"uint256"},{"internalType":"uint256","name":"atomicTwapWindow","type":"uint256"},{"internalType":"uint256","name":"atomicMaxVolumePerBlock","type":"uint256"},{"internalType":"uint256","name":"atomicVolatilityConsiderationWindow","type":"uint256"},{"internalType":"uint256","name":"atomicVolatilityUpdateThreshold","type":"uint256"},{"internalType":"uint256","name":"exchangeFeeRate","type":"uint256"},{"internalType":"uint256","name":"exchangeMaxDynamicFee","type":"uint256"},{"internalType":"uint256","name":"exchangeDynamicFeeRounds","type":"uint256"},{"internalType":"uint256","name":"exchangeDynamicFeeThreshold","type":"uint256"},{"internalType":"uint256","name":"exchangeDynamicFeeWeightDecay","type":"uint256"}],"internalType":"struct IDirectIntegrationManager.ParameterIntegrationSettings","name":"","type":"tuple"}],"name":"effectiveAtomicValueAndRates","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"sourceCurrencyKey","type":"bytes32"},{"internalType":"uint256","name":"sourceAmount","type":"uint256"},{"internalType":"bytes32","name":"destinationCurrencyKey","type":"bytes32"}],"name":"effectiveValue","outputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"sourceCurrencyKey","type":"bytes32"},{"internalType":"uint256","name":"sourceAmount","type":"uint256"},{"internalType":"bytes32","name":"destinationCurrencyKey","type":"bytes32"}],"name":"effectiveValueAndRates","outputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"sourceRate","type":"uint256"},{"internalType":"uint256","name":"destinationRate","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"sourceCurrencyKey","type":"bytes32"},{"internalType":"uint256","name":"sourceAmount","type":"uint256"},{"internalType":"bytes32","name":"destinationCurrencyKey","type":"bytes32"},{"internalType":"uint256","name":"roundIdForSrc","type":"uint256"},{"internalType":"uint256","name":"roundIdForDest","type":"uint256"}],"name":"effectiveValueAndRatesAtRound","outputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"sourceRate","type":"uint256"},{"internalType":"uint256","name":"destinationRate","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currencyKey","type":"bytes32"}],"name":"getCurrentRoundId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currencyKey","type":"bytes32"},{"internalType":"uint256","name":"startingRoundId","type":"uint256"},{"internalType":"uint256","name":"startingTimestamp","type":"uint256"},{"internalType":"uint256","name":"timediff","type":"uint256"}],"name":"getLastRoundIdBeforeElapsedSecs","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isResolverCached","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currencyKey","type":"bytes32"}],"name":"lastRateUpdateTimes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"currencyKeys","type":"bytes32[]"}],"name":"lastRateUpdateTimesForCurrencies","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currencyKey","type":"bytes32"}],"name":"rateAndInvalid","outputs":[{"internalType":"uint256","name":"rate","type":"uint256"},{"internalType":"bool","name":"isInvalid","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currencyKey","type":"bytes32"},{"internalType":"uint256","name":"roundId","type":"uint256"}],"name":"rateAndTimestampAtRound","outputs":[{"internalType":"uint256","name":"rate","type":"uint256"},{"internalType":"uint256","name":"time","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currencyKey","type":"bytes32"}],"name":"rateAndUpdatedTime","outputs":[{"internalType":"uint256","name":"rate","type":"uint256"},{"internalType":"uint256","name":"time","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currencyKey","type":"bytes32"}],"name":"rateForCurrency","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currencyKey","type":"bytes32"}],"name":"rateIsFlagged","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currencyKey","type":"bytes32"}],"name":"rateIsInvalid","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currencyKey","type":"bytes32"}],"name":"rateIsStale","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rateStalePeriod","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currencyKey","type":"bytes32"}],"name":"rateWithSafetyChecks","outputs":[{"internalType":"uint256","name":"rate","type":"uint256"},{"internalType":"bool","name":"broken","type":"bool"},{"internalType":"bool","name":"staleOrInvalid","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"currencyKeys","type":"bytes32[]"}],"name":"ratesAndInvalidForCurrencies","outputs":[{"internalType":"uint256[]","name":"rates","type":"uint256[]"},{"internalType":"bool","name":"anyRateInvalid","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currencyKey","type":"bytes32"},{"internalType":"uint256","name":"numRounds","type":"uint256"},{"internalType":"uint256","name":"roundId","type":"uint256"}],"name":"ratesAndUpdatedTimeForCurrencyLastNRounds","outputs":[{"internalType":"uint256[]","name":"rates","type":"uint256[]"},{"internalType":"uint256[]","name":"times","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"currencyKeys","type":"bytes32[]"}],"name":"ratesForCurrencies","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rebuildCache","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currencyKey","type":"bytes32"}],"name":"removeAggregator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"resolver","outputs":[{"internalType":"contract AddressResolver","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"resolverAddressesRequired","outputs":[{"internalType":"bytes32[]","name":"addresses","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"synthTooVolatileForAtomicExchange","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"currencyKey","type":"bytes32"},{"internalType":"address","name":"dexPriceAggregator","type":"address"},{"internalType":"address","name":"atomicEquivalentForDexPricing","type":"address"},{"internalType":"uint256","name":"atomicExchangeFeeRate","type":"uint256"},{"internalType":"uint256","name":"atomicTwapWindow","type":"uint256"},{"internalType":"uint256","name":"atomicMaxVolumePerBlock","type":"uint256"},{"internalType":"uint256","name":"atomicVolatilityConsiderationWindow","type":"uint256"},{"internalType":"uint256","name":"atomicVolatilityUpdateThreshold","type":"uint256"},{"internalType":"uint256","name":"exchangeFeeRate","type":"uint256"},{"internalType":"uint256","name":"exchangeMaxDynamicFee","type":"uint256"},{"internalType":"uint256","name":"exchangeDynamicFeeRounds","type":"uint256"},{"internalType":"uint256","name":"exchangeDynamicFeeThreshold","type":"uint256"},{"internalType":"uint256","name":"exchangeDynamicFeeWeightDecay","type":"uint256"}],"internalType":"struct IDirectIntegrationManager.ParameterIntegrationSettings","name":"","type":"tuple"}],"name":"synthTooVolatileForAtomicExchange","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}]}